<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>某熊猫桑·自留地</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://marsgt.github.io/"/>
  <updated>2019-09-15T09:00:25.442Z</updated>
  <id>https://marsgt.github.io/</id>
  
  <author>
    <name>某熊猫桑</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Phaser3写H5的简易避坑指南</title>
    <link href="https://marsgt.github.io/2019/09/15/%E4%BD%BF%E7%94%A8Phaser3%E5%86%99H5%E7%9A%84%E7%AE%80%E6%98%93%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <id>https://marsgt.github.io/2019/09/15/使用Phaser3写H5的简易避坑指南/</id>
    <published>2019-09-15T08:08:12.000Z</published>
    <updated>2019-09-15T09:00:25.442Z</updated>
    
    <content type="html"><![CDATA[<p>回到H5行业后的前几个项目，试着用了下以前一直想用的Phaser3，体验还阔以。本篇简单讲讲一些经验和碰到过的坑。    <a id="more"></a></p><p>首先需要提前讲的，比较合适的参考/文档(目前来看)有以下三个：</p><ol>    <li><a href="https://photonstorm.github.io/phaser3-docs/index.html" target="_blank" rel="noopener">Phaser3 官方 API 文档</a></li>    <li><a href="https://labs.phaser.io/index.html" target="_blank" rel="noopener">Phaser3 官方 Demo 集锦</a></li>    <li><a href="https://rexrainbow.github.io/phaser3-rex-notes/docs/site/index.html" target="_blank" rel="noopener">(我心目中巨实用的)目前最靠谱的第三方文档</a></li></ol><p>（最后一个重点推荐，之前有好多东西，我看官方文档看的满头问号，但是看这个文档是真的能看懂~）</p><p>好，下面可以开始(suì)正(suì)题(niàn)了。</p><p>Phaser3使用起来大概可以分成 3 个部分：</p><ol>    <li>加载基础的库文件(废话)，这里包括Phaser3库本体(可以自己定制)和一些第三方插件(如果有的话)；</li>    <li>全局配置，是一个对象，包括渲染方式(Canvas 还是 WebGL)、背景色、Canvas 容器的 CSS 基础样式、缩放适配、事件监听的开/闭，一直到 Scene 配置(后边讲)，直接写到里边就成；</li>    <li>Scene，简单来说有点像游戏里的场景，每个场景里会包含各自独立的精灵、图片之类不同的资源，以及各种数据，甚至插件等。比如切换页面，就可以直接用场景功能来实现。</li></ol><p>在代码结构上，我个人比较倾向于每个Scene/页面一个文件，一个Scene重新new个<code>Phaser.Scene</code>出来就好。然后在首页HTML里把每个Scene文件全加载以后，再上init.js全局配置就行了。当然，一些统计/jQ辅助/wechat分享注册/bgm自动加载之类的代码放前边就好。</p><p>下边说一些零零碎碎的经验：</p><ol>    <li>首先是Phaser3库文件可以精简，官方有个<a href="https://github.com/photonstorm/phaser3-custom-build" target="_blank" rel="noopener">photonstorm/phaser3-custom-build</a>项目，就是教你怎么自己build库文件的，我自己fork了一下放到了<a href="https://github.com/MarsGT/phaser3-custom-build" target="_blank" rel="noopener">MarsGT/phaser3-custom-build</a>，主要是敲掉一些用不着的东西，精简过后大概600k~800k左右。</li>    <li><code>this.add.text</code>如果用自定义字体（比如用Fontmin精简过的），需要在HTML里加个用了这个字体的div，比如<code>&lt;div style=&#39;font-family:myfont;position:absolute;visibility:hidden;&#39;&gt;000&lt;/div&gt;</code>，否则字体不会生效；如果就想用默认的字体，直接把<code>fontFamily</code>设置为<code>sans-serif</code>就行了。</li>    <li>骨骼动画目前没法直接用DragonBones的Runtime（我是Demo都跑不出来的那种不能用），但可以使用Spine的，直接到Phaser3主项目的<code>plugins/spine/dist</code>目录下就能找到这个插件了，在HTML里加载，然后在全局配置里加上        <pre class=" language-javascript"><code class="language-javascript">plugins<span class="token punctuation">:</span> <span class="token punctuation">{</span>   scene<span class="token punctuation">:</span> <span class="token punctuation">[</span>       <span class="token punctuation">{</span>           key<span class="token punctuation">:</span> <span class="token string">'SpineWebGLPlugin'</span><span class="token punctuation">,</span>           plugin<span class="token punctuation">:</span> SpineWebGLPlugin<span class="token punctuation">,</span>           start<span class="token punctuation">:</span> <span class="token boolean">true</span>       <span class="token punctuation">}</span>   <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre> 就能用了。<br>另外在DragonBones输出Spine格式的时候要注意，我个人不推荐用编辑器直出，而更建议用<a href="https://github.com/DragonBones/Tools" target="_blank" rel="noopener">DragonBones Tools</a>这个工具转换已有的DragonBones文件，主要是因为编辑器直出的是3.3版本的(spine)文件，而转换出来的则是3.6。不过转换出来还需要检查下json主配置文件，里边有个<code>deform</code>字段，其下可能会存在一个空字符串主键导致报错，改成<code>&quot;default&quot;</code>即可。还有，<code>this.load.spine</code>之前可以先用<code>this.load.setPath</code>设置下路径，这样json文件和atlas文件可以不用再写整段路径了，还有png素材也不用去单独指定路径了。<br>再补充下，如果DragonBones动画里使用了ik，到网页上时ik可能会出现完全失效的情况，会使动画出现“鬼畜”（实际是由于失去了ik的约束，使原有骨骼出现了错位），这是因为 DragonBones导出的Spine JSON文件中，<code>ik</code>字段数组下的每个成员都缺少了一个<code>order</code>字段（其实就是排序），加上之后就没问题了。</li>    <li>说一下预加载。预加载一般单独放个Scene里，比如可以叫loader，那么loader需要的资源就在<code>loader.preload</code>回调里加载，然后整个H5需要用到的资源放到<code>loader.create</code>回调里加载（实际就是动态加载）。另外注意在create回调里加载资源的时候，最后需要加一句<code>this.load.start()</code>启动加载。至于progress和complete这俩事件就不多说了。</li>    <li>如果不是全站CDN(HTML文件在普通服上，其它静态资源在CDN)，可以在HTML文件的<code>&lt;head&gt;</code>里加个<code>&lt;base&gt;</code>标签设置CDN基地址，相对比较方便。</li>    <li>对于数量限定的位图字体，比如只在游戏计分出现的字体（只有数字），用RetroFont是最方便的。切图处理时需要注意，要把所有用到的字符单独输出等大的图片，然后横向拼到一张图里，加载时按普通图片加载就行，初始化需要用RetroFont的方式：        <pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span>bitmapFont<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'my_num'</span><span class="token punctuation">,</span> Phaser<span class="token punctuation">.</span>GameObjects<span class="token punctuation">.</span>RetroFont<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>   image<span class="token punctuation">:</span> <span class="token string">'my_num'</span><span class="token punctuation">,</span>   width<span class="token punctuation">:</span> <span class="token number">52</span><span class="token punctuation">,</span>   height<span class="token punctuation">:</span> <span class="token number">83</span><span class="token punctuation">,</span>   chars<span class="token punctuation">:</span> <span class="token string">'0123456789'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 指定图里都是什么字符</span>   charsPerRow<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 每行字符数</span>   spacing<span class="token punctuation">:</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 每字符相隔像素数</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre> 然后就可以直接按bitmaptext那样去用了<code>this.add.bitmapText(106, 64, &#39;my_num&#39;, &#39;012&#39;)</code></li>    <li>全局配置，直接放代码了：        <pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>   type<span class="token punctuation">:</span> Phaser<span class="token punctuation">.</span>AUTO<span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// 一般用Phaser.AUTO就行，很少有项目需要强行指定Phaser.WEBGL的。Canvas那项我觉得没啥用</span>   <span class="token comment" spellcheck="true">// backgroundColor: 0x1b1b1d,         // 看项目需要，如果需要背景色时可以直接在这里设置</span>   render<span class="token punctuation">:</span> <span class="token punctuation">{</span>       antialias<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true">// 抗锯齿，建议开</span>       transparent<span class="token punctuation">:</span> <span class="token boolean">true</span>                 <span class="token comment" spellcheck="true">// Canvas容器背景透明，如果有和DOM有交互时这项可以开，记得把背景色关掉</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   canvasStyle<span class="token punctuation">:</span> <span class="token string">'overflow:hidden;'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 在这里设置Canvas容器的行内样式</span>   banner<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">// 把这项关掉，就不会在控制台输出Phaser引擎版本之类自带的调试信息了</span>   scale<span class="token punctuation">:</span> <span class="token punctuation">{</span>       width<span class="token punctuation">:</span> <span class="token number">750</span><span class="token punctuation">,</span>                       <span class="token comment" spellcheck="true">// 建议把设计稿尺寸写这里，会按这个尺寸缩放</span>       height<span class="token punctuation">:</span> <span class="token number">1206</span><span class="token punctuation">,</span>       mode<span class="token punctuation">:</span> Phaser<span class="token punctuation">.</span>Scale<span class="token punctuation">.</span>ENVELOP<span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// 适配方式，Phaser.Scale.ENVELOP就相当于是cover，而Phaser.Scale.FIT相当于contain</span>       autoCenter<span class="token punctuation">:</span> Phaser<span class="token punctuation">.</span>Scale<span class="token punctuation">.</span>CENTER_BOTH<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 居中方式，有CENTER_HORIZONTALLY、CENTER_VERTICALLY和CENTER_BOTH三种可选</span>       max<span class="token punctuation">:</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 指定适配后的最大尺寸，这里限制一下，在pc端会美观一点(不会出现尺寸特别大的情况)</span>           width<span class="token punctuation">:</span> <span class="token number">1080</span><span class="token punctuation">,</span>           height<span class="token punctuation">:</span> <span class="token number">1920</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   physics<span class="token punctuation">:</span> <span class="token punctuation">{</span>       <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'arcade'</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// 物理引擎，一般不大的需求用arcade就够了</span>       arcade<span class="token punctuation">:</span> <span class="token punctuation">{</span> debug<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// arcade设置，打开debug可以看到刚体的定界框</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   input<span class="token punctuation">:</span> <span class="token punctuation">{</span>       mouse<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">// 移动端项目一般关掉mouse，不然会出点透bug</span>       activePointers<span class="token punctuation">:</span> <span class="token number">1</span>                 <span class="token comment" spellcheck="true">// 多指触摸限制，不过貌似用处不大</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   disableContextMenu<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   loader<span class="token punctuation">:</span> <span class="token punctuation">{</span>       crossOrigin<span class="token punctuation">:</span> <span class="token string">'anonymous'</span>          <span class="token comment" spellcheck="true">// 避免图片跨域</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   scene<span class="token punctuation">:</span> <span class="token punctuation">[</span>loader<span class="token punctuation">,</span> home<span class="token punctuation">,</span> game<span class="token punctuation">]</span>           <span class="token comment" spellcheck="true">// 这里放每一个Scene的变量，初始化完成后默认加载第一个Scene</span><span class="token punctuation">}</span></code></pre>    </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;回到H5行业后的前几个项目，试着用了下以前一直想用的Phaser3，体验还阔以。本篇简单讲讲一些经验和碰到过的坑。
    
    </summary>
    
      <category term="前端" scheme="https://marsgt.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="随手记" scheme="https://marsgt.github.io/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
      <category term="javascript" scheme="https://marsgt.github.io/tags/javascript/"/>
    
      <category term="Phaser3" scheme="https://marsgt.github.io/tags/Phaser3/"/>
    
  </entry>
  
  <entry>
    <title>【转】使用React和HTML5表单验证API处理表单元素</title>
    <link href="https://marsgt.github.io/2019/04/22/%E3%80%90%E8%BD%AC%E3%80%91%E4%BD%BF%E7%94%A8React%E5%92%8CHTML5%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81API%E5%A4%84%E7%90%86%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0/"/>
    <id>https://marsgt.github.io/2019/04/22/【转】使用React和HTML5表单验证API处理表单元素/</id>
    <published>2019-04-22T07:29:00.000Z</published>
    <updated>2019-04-22T09:03:11.545Z</updated>
    
    <content type="html"><![CDATA[<ul>    <li>作者: Dmitry Sheiko | 译：甄玉磊</li>    <li>原文地址：<a href="http://dsheiko.com/weblog/handling-forms-with-react-and-html5-form-validation-api" target="_blank" rel="noopener">Handling forms with React and HTML5 Form Validation API</a></li>    <li>译文地址：<a href="https://jdc.jd.com/archives/212629" target="_blank" rel="noopener">【译】使用React和HTML5表单验证API处理表单元素</a></li></ul><p>(最近在折腾 React，表单这块想用原生校验，找资料时发现了这篇文章。原译文代码的部分有些乱，所以处理了一下并转到这里。)<br><a id="more"></a></p><p><strong>【译者注：链接序号对应下面扩展阅读，另外可以点击阅读原文查看详细的链接文章】</strong></p><blockquote>    <p>简介：React 没有内置的表单验证逻辑，但是我们可以使用第三方解决方案。这种方法可能是开发包、表单生成器，还可能是 HOC 或者是包含校验逻辑的任意表单容器组件。那么选择哪种方法呢？我们将在本文中一 一介绍。</p></blockquote><p>每当我们提及应用程序中的用户输入框时，首先映入脑海的就是 HTML 的表单元素。最早的 HTML 版本就已经支持 Web 表单。众所周知，这一特性于 1991 年提出，且在 1995 年作为 RFC（征求评议文件） 1866 号协议<a href="https://tools.ietf.org/html/rfc1866" target="_blank" rel="noopener">[1]</a>标准化。与此同时表单元素也得到了广泛应用，几乎每一个代码库和框架中都在使用。那么在 React 中如何使用呢？ Facebook 在如何处理表单上提供了受控的输入框<a href="https://reactjs.org/docs/forms.html" target="_blank" rel="noopener">[2]</a>。该输入框指的是受控表单，主要是通过交互事件和通过 value 属性传递 state 值实现对输入框的控制。因此，你可以决定表单的校验和提交逻辑。拥有好的用户体验的 UI ，意味着你应该考虑到诸如“提交”、“校验”的逻辑以及内联的错误提示信息，根据有效性、原始状态和提交状态来切换元素。难道我们不能提取这种逻辑，简单的插入到表单元素中吗？当然可以，唯一要考虑的问题是我们要采用何种方法和解决方案。</p><h2 id="组件库中的表单"><a href="#组件库中的表单" class="headerlink" title="组件库中的表单"></a>组件库中的表单</h2><p>如果你习惯使用诸如 ReactBootstrap<a href="https://react-bootstrap.github.io/components/forms/" target="_blank" rel="noopener">[3]</a> 或者 AntDesign<a href="https://ant.design/components/form/" target="_blank" rel="noopener">[4]</a> 等 React 组件库，很可能已经对其中的表单组件感到满意。这两个组件库所提供的表单组件满足了多种需求。例如在 AntDesign 组件库中我们定义了一个表单元素 Form 以及带有表单域的 FormItem ，即包裹了任意输入控制的容器。你可以在 FormItem 设置校验规则：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FormItem</span><span class="token punctuation">></span></span>   <span class="token punctuation">{</span><span class="token function">getFieldDecorator</span><span class="token punctuation">(</span><span class="token string">'select'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>     rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>       <span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'Please select your country!'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Select</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Please</span> <span class="token attr-name">select</span> <span class="token attr-name">a</span> <span class="token attr-name">country"</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>china<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>China<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Option</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>use<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>U<span class="token punctuation">.</span>S<span class="token punctuation">.</span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Option</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Select</span><span class="token punctuation">></span></span>   <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FormItem</span><span class="token punctuation">></span></span></code></pre><p>举例来说，在处理表单提交时，你可以执行 <code>this.props.form.validateFields()</code> 来验证。这样看起来似乎所有事情都考虑到了。然而该解决方案是针对框架的。如果你没有使用这些组件库，则无法使用该方法。</p><h2 id="基于schema构建表单"><a href="#基于schema构建表单" class="headerlink" title="基于schema构建表单"></a>基于schema构建表单</h2><p>或者我们可以基于 JSON 细则构建单独的表单组件，例如我们可以引入 Winterfell 组件<a href="https://github.com/andrewhathaway/Winterfell" target="_blank" rel="noopener">[5]</a>，构建如下所示的表单组件</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Winterfell</span> <span class="token attr-name">schema</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>loginSchema<span class="token punctuation">}</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Winterfell</span><span class="token punctuation">></span></span></code></pre><p>然而这个方案是相当复杂的<a href="https://github.com/andrewhathaway/Winterfell/blob/master/examples/schema.js" target="_blank" rel="noopener">[6]</a>。除此之外，我们还需要满足特定的语法。类似的另一种解决方案 react-jsonschema-form<a href="https://github.com/mozilla-services/react-jsonschema-form" target="_blank" rel="noopener">[7]</a>，依赖于 JSON schema<a href="http://json-schema.org/" target="_blank" rel="noopener">[8]</a>。JSON schema 是一种与项目无关的数据文档，用来注释和校验 JSON 文档。但是，它可以将我们定义的特有属性应用在项目中，且在文档中定义。</p><h2 id="Formsy（译者注：一种-React-表单验证组件）"><a href="#Formsy（译者注：一种-React-表单验证组件）" class="headerlink" title="Formsy（译者注：一种 React 表单验证组件）"></a>Formsy（译者注：一种 React 表单验证组件）</h2><p>我更倾向于使用一种具有逻辑校验，适用于任意 HTML 表单的组件。其中最常用的方法是—— Formsy<a href="https://github.com/formsy/formsy-react" target="_blank" rel="noopener">[9]</a>。是什么样的结构呢？我构建了自己的表单组件，并用HOC（Higher-Order Components，高阶组件）把 Formsy 包裹起来：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> withFormsy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"formsy-react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  changeValue <span class="token operator">=</span> <span class="token punctuation">(</span> event <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span> event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>          <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>changeValue <span class="token punctuation">}</span></span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">""</span> <span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">getErrorMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withFormsy</span><span class="token punctuation">(</span> MyInput <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如上所示，组件的 props 属性中接收了 <code>getErrorMessage()</code> 函数，该函数可以用来生成行内错误提示信息。<br>这样我们开发了一个输入域组件，将其放入表单中如下所示：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> Formsy <span class="token keyword">from</span> <span class="token string">"formsy-react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> MyInput <span class="token keyword">from</span> <span class="token string">"./MyInput"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  onValid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> valid<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  onInvalid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> valid<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">submit</span><span class="token punctuation">(</span> model <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Formsy</span> <span class="token attr-name">onValidSubmit</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>submit<span class="token punctuation">}</span></span> <span class="token attr-name">onValid</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onValid<span class="token punctuation">}</span></span> <span class="token attr-name">onInvalid</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onInvalid<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyInput</span>          <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span>          <span class="token attr-name">validations</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isEmail<span class="token punctuation">"</span></span>          <span class="token attr-name">validationError</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>This</span> <span class="token attr-name">is</span> <span class="token attr-name">not</span> <span class="token attr-name">a</span> <span class="token attr-name">valid</span> <span class="token attr-name">email"</span>          <span class="token attr-name">required</span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyInput</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>valid <span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Formsy</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们指定所有需要验证的区域都会添加 validations 属性（详见 validations 列表属性<a href="https://github.com/formsy/formsy-react/blob/master/API.md#validators" target="_blank" rel="noopener">[10]</a>）。使用 validationError 属性来设置所期望的校验信息，通过 onValid 和 onInvalid 接收表单校验状态。</p><p>这样看上去很简单、干净、灵活。但是我想知道的是为什么我们不依赖 HTML5 的表单验证<a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation" target="_blank" rel="noopener">[11]</a>，而是使用繁多的自定义实现呢？</p><h2 id="HTML5表单验证"><a href="#HTML5表单验证" class="headerlink" title="HTML5表单验证"></a>HTML5表单验证</h2><p>这项技术在很早之前就出现了，首次实现是在 2008 年的 Opera 9.5 中。现在所有的现代浏览器都支持它。表单（数据）验证<a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation" target="_blank" rel="noopener">[12]</a>引入额外的 HTML 属性和 input 类型，这些可以用来设置表单的校验规则。这些校验还可以使用特有的 API <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation" target="_blank" rel="noopener">[13]</a>来控制和自定义表单JavaScript。</p><p>让我们看下面的代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>answer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>What do you know, Jon Snow?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>answer<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>answer<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Ask<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>这是一个简单的表单，期望的功能 —— <code>&lt;input&gt;</code> 元素有<code>required</code>的属性。因此，如果我们快速按下提交按钮，表单内容不会提交到服务器。相反我们会看到在输入框旁出现提示信息，提示 <code>value</code> 值没有满足给出的限制条件（不能为空）。</p><p><img src="/images/pasted-0.png" alt></p><p>现在我们给输入框增加约束条件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>answer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>What do you know, Jon Snow?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>answer<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>answer<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nothing|nix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Ask<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>错误提示信息并没有给出我们期望的信息，不是吗？我们可以自定义它（例如为了解释所期望的用户输入值）或者仅仅对输入值进行转换。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>answer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>What do you know, Jon Snow?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>answer<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>answer<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nothing|nix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Ask<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> answer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span> <span class="token string">"[name=answer]"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>answer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> event <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> answer<span class="token punctuation">.</span>validity<span class="token punctuation">.</span>patternMismatch <span class="token punctuation">)</span> <span class="token punctuation">{</span>    answer<span class="token punctuation">.</span><span class="token function">setCustomValidity</span><span class="token punctuation">(</span><span class="token string">"Oh, it's not a right answer!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    answer<span class="token punctuation">.</span><span class="token function">setCustomValidity</span><span class="token punctuation">(</span> <span class="token string">""</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上代码只是检查 input 框的输入事件，其校验状态 <code>patternMismatch</code> 的变化。当输入的值与定义的 <code>pattern</code> 不匹配时，就会出现错误提示信息。如果我们设置了其他的限制条件<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation" target="_blank" rel="noopener">[14]</a>，也会被我们所定义的事件处理函数所覆盖。</p><p><img src="/images/pasted-1.png" alt></p><p>你对这个工具提示不太满意？是的，它在不同的浏览器中表现形式是不一样的。让我们给表单元素增加novalidate属性，并且自定义错误提示：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">novalidate</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>answer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>What do you know, Jon Snow?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>answer<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>answer<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nothing|nix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Ask<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> answer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span> <span class="token string">"[name=answer]"</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>      answerError <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span> <span class="token string">"[name=answer] + [data-bind=message]"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>answer<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span> <span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> event <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  answerError<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> answer<span class="token punctuation">.</span>validationMessage<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/images/pasted-2.png" alt></p><p>尽管这个介绍比较简短，你也能体会到技术背后的力量和灵活性。最重要的是，它是原生的表单验证。所以我们为什么要依赖繁多的自定义库。而不去使用原生的验证呢？</p><h2 id="满足表单校验的-React-API"><a href="#满足表单校验的-React-API" class="headerlink" title="满足表单校验的 React API"></a>满足表单校验的 React API</h2><p>react-html5-form 将 React（还可以选择Redux） 和 HTML5 表单校验 API 联系起来了。它提供 <code>From</code> 组件和 <code>InputGroup</code> 组件（类似于 Formsy 组件库中的 input，或者 AntDesign 组件库中的 <code>FormItem</code> ）。这样，<code>Form</code> 组件定义了表单及其作用区域。<code>InputGroup</code> 组件可以包含一个或多个输入框。我们简单地用这些组件包裹一个任意的表单内容（只是普通的 HTML 或 React 组件）。在用户事件上，我们可以请求表单验证，并根据有效的输入值，获得 <code>Form</code> 和 <code>InputGroup</code> 组件的更新状态。</p><p>好了，让我们实践一下，首先我们定义表单区域：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Form<span class="token punctuation">,</span> InputGroup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"Form"</span><span class="token punctuation">;</span><span class="token keyword">const</span> MyForm <span class="token operator">=</span> props <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Form<span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> error<span class="token punctuation">,</span> valid<span class="token punctuation">,</span> pristine<span class="token punctuation">,</span> submitting<span class="token punctuation">,</span> form <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span><span class="token operator">></span>      Form content      <span class="token operator">&lt;</span>button disabled<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">(</span> pristine <span class="token operator">||</span> submitting <span class="token punctuation">)</span> <span class="token punctuation">}</span> type<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>Submit<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span> <span class="token operator">&lt;</span>MyForm <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>MyForm<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span> <span class="token string">"app"</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>作用域接收到的状态对象具有以下属性：</p><ul>    <li>error - 表单错误信息（通常指的是服务端的校验信息），可以通过 <code>form.setError()</code> 进行设置；</li>    <li>valid - 布尔值，表示所有的输入是否全部满足规定的约束；</li>    <li>pristine - 布尔值，表示用户是否和表单进行过交互；</li>    <li>submitting - 布尔值，表示是否正在提交表单（当用户按下提交按钮时该状态转化为 true，一旦用户定义的异步提交逻辑处理结束，该值变为 false）</li>    <li>form - 用于访问表单组件 API 的表单实例；</li></ul><p>在这里我们使用 <code>pristine</code> 和 <code>submitting</code> 属性将提交按钮切换为禁用状态。</p><p>为了在提交表单的同时校验表单输入信息，我们使用 InputGroup 包裹这些input表单。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputGroup</span> <span class="token attr-name">validate</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span> <span class="token string">"email"</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> error<span class="token punctuation">,</span> valid <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">htmlFor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emailInput<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Email address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span>        <span class="token attr-name">required</span>        <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span>        <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emailInput<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token punctuation">{</span> error <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>invalid-feedback<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>error<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>InputGroup</span><span class="token punctuation">></span></span></code></pre><p>使用 <code>validate</code> 属性我们可以指定该组内应该使用什么样的 input。[“email”] 意味着我们只有一个名称为“email”的input。</p><p>在这个作用区域内我们接收到的状态对象具有下面的属性：</p><ul>    <li>errors – 所有注册 input 的错误信息数组；</li>    <li>error – 最后显示的错误信息；</li>    <li>valid – 布尔值，表示是否所有的输入数据全部满足规定的约束条件；</li>    <li>inputGroup – 访问表单组件 API 的实例；</li></ul><p>渲染之后我们可以得到一个 email 类型的输入框。如果该值为空，或在提交时包含无效的电子邮件地址，则在输入框旁边显示相应的验证消息。</p><p><img src="/images/pasted-3.png" alt></p><p>还记得我们在使用原生表单校验 API 自定义错误提示信息时的焦头烂额吗？使用 InputGroup 这一情况将变得好转：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputGroup</span>    <span class="token attr-name">validate</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span> <span class="token string">"email"</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></span>    <span class="token attr-name">translate</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>      email<span class="token punctuation">:</span> <span class="token punctuation">{</span>        valueMissing<span class="token punctuation">:</span> <span class="token string">"C'mon! We need some value"</span><span class="token punctuation">,</span>        typeMismatch<span class="token punctuation">:</span> <span class="token string">"Hey! We expect an email address here"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token attr-name">}</span><span class="token punctuation">></span></span><span class="token operator">...</span></code></pre><p>我们可以将每个 input 定义为 key-value 的哈希结构，其中 keys 表示有效性属性<a href="https://developer.mozilla.org/en-US/docs/Web/API/ValidityState" target="_blank" rel="noopener">[15]</a>，values 表示自定义消息。</p><p>自定义消息很简单。那么自定义验证该如何实现呢？我们可以使用校验的 prop 来做到：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InputGroup</span> <span class="token attr-name">validate</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>    <span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span> input <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>EMAIL_WHITELIST<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span> input<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        input<span class="token punctuation">.</span><span class="token function">setCustomValidity</span><span class="token punctuation">(</span> <span class="token string">"Only whitelisted email allowed"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span>  <span class="token attr-name">}}</span><span class="token punctuation">></span></span><span class="token operator">...</span></code></pre><p>在这个例子中，我们提供的是包含输入框名字的哈希而不是数组，其中 key 是输入框的名字， value 是验证处理函数。处理函数校验输入值（可以异步完成）并返回一个布尔类型的有效状态。使用 <code>input.setCustomValidity</code>，我们可以自定义验证消息。</p><p>输入框并不总是提交时才进行校验。为了达到实时验证，首先我们需要给输入事件定义事件处理函数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> onInput <span class="token operator">=</span> <span class="token punctuation">(</span> e<span class="token punctuation">,</span> inputGroup <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  inputGroup<span class="token punctuation">.</span><span class="token function">checkValidityAndUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>事实上，我们可以在用户每次输入时重新验证。控制逻辑如下所示：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span>  <span class="token attr-name">required</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span>  <span class="token attr-name">onInput</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span> e <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">onInput</span><span class="token punctuation">(</span> e<span class="token punctuation">,</span> inputGroup<span class="token punctuation">,</span> form <span class="token punctuation">)</span> <span class="token punctuation">}</span></span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emailInput<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>这样，每当输入值改变时都会进行验证。如果输入值是无效的，我们就会马上收到错误的提示信息。</p><p>你可以通过这里找到以上示例的源代码<a href="https://github.com/dsheiko/react-html5-form/blob/master/demo/bootstrap/src/index.jsx" target="_blank" rel="noopener">[16]</a>。</p><p>顺便说一句，你是否考虑过将组件派生的表单状态树和 Redux 存储值联系起来？我们也可以这样做。</p><p>Redux 提供了包含所有注册表单状态树的 reducer：<code>html5form</code>。我们可以按照如下所示将 <code>html5form</code> 和 store 结合起来：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./Containers/App.jsx"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> html5form <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-html5-form"</span><span class="token punctuation">;</span><span class="token keyword">const</span> appReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  html5form<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Store creation</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span> appReducer <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span> <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>  <span class="token operator">&lt;</span>App <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span> <span class="token string">"app"</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当我们运行该应用程序时，就能在 store 中找到所有与表单相关的状态。</p><p><img src="/images/pasted-4.png" alt></p><p>点击这里<a href="https://github.com/dsheiko/react-html5-form/blob/master/demo/bootstrap-redux/src/index.jsx" target="_blank" rel="noopener">[17]</a>查看上述 demo 的源代码。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>React 没有内置的表单验证逻辑，但是我们可以使用第三方解决方案。这种方法可能是开发包、表单生成器，还可能是 HOC 或者是包含校验逻辑的任意表单容器组件。我个人倾向于使用容器组件，该组件依赖于 HTML 内置表单验证 API ，并在表单和表单域的范围中显示有效性状态。</p><ul>    <li>react-html5-form 源代码<a href="https://github.com/dsheiko/react-html5-form" target="_blank" rel="noopener">[18]</a></li>    <li>演示例子链接<a href="https://dsheiko.github.io/react-html5-form" target="_blank" rel="noopener">[19]</a></li></ul><hr><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ol>    <li><a href="https://tools.ietf.org/html/rfc1866" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc1866</a></li>    <li><a href="https://reactjs.org/docs/forms.html" target="_blank" rel="noopener">https://reactjs.org/docs/forms.html</a></li>    <li><a href="https://react-bootstrap.github.io/components/forms/" target="_blank" rel="noopener">https://react-bootstrap.github.io/components/forms/</a></li>    <li><a href="https://ant.design/components/form/" target="_blank" rel="noopener">https://ant.design/components/form/</a></li>    <li><a href="https://github.com/andrewhathaway/Winterfell" target="_blank" rel="noopener">https://github.com/andrewhathaway/Winterfell</a></li>    <li><a href="https://github.com/andrewhathaway/Winterfell/blob/master/examples/schema.js" target="_blank" rel="noopener">https://github.com/andrewhathaway/Winterfell/blob/master/examples/schema.js</a></li>    <li><a href="https://github.com/mozilla-services/react-jsonschema-form" target="_blank" rel="noopener">https://github.com/mozilla-services/react-jsonschema-form</a></li>    <li><a href="http://json-schema.org/" target="_blank" rel="noopener">http://json-schema.org/</a></li>    <li><a href="https://github.com/formsy/formsy-react" target="_blank" rel="noopener">https://github.com/formsy/formsy-react</a></li>    <li><a href="https://github.com/formsy/formsy-react/blob/master/API.md#validators" target="_blank" rel="noopener">https://github.com/formsy/formsy-react/blob/master/API.md#validators</a></li>    <li><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation</a></li>    <li><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation</a></li>    <li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation</a></li>    <li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation</a></li>    <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/ValidityState" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/ValidityState</a></li>    <li><a href="https://github.com/dsheiko/react-html5-form/blob/master/demo/bootstrap/src/index.jsx" target="_blank" rel="noopener">https://github.com/dsheiko/react-html5-form/blob/master/demo/bootstrap/src/index.jsx</a></li>    <li><a href="https://github.com/dsheiko/react-html5-form/blob/master/demo/bootstrap-redux/src/index.jsx" target="_blank" rel="noopener">https://github.com/dsheiko/react-html5-form/blob/master/demo/bootstrap-redux/src/index.jsx</a></li>    <li><a href="https://github.com/dsheiko/react-html5-form" target="_blank" rel="noopener">https://github.com/dsheiko/react-html5-form</a></li>    <li><a href="https://dsheiko.github.io/react-html5-form" target="_blank" rel="noopener">https://dsheiko.github.io/react-html5-form</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
    &lt;li&gt;作者: Dmitry Sheiko | 译：甄玉磊&lt;/li&gt;
    &lt;li&gt;原文地址：&lt;a href=&quot;http://dsheiko.com/weblog/handling-forms-with-react-and-html5-form-validation-api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Handling forms with React and HTML5 Form Validation API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;译文地址：&lt;a href=&quot;https://jdc.jd.com/archives/212629&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【译】使用React和HTML5表单验证API处理表单元素&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(最近在折腾 React，表单这块想用原生校验，找资料时发现了这篇文章。原译文代码的部分有些乱，所以处理了一下并转到这里。)&lt;br&gt;
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="React" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/React/"/>
    
    
      <category term="React" scheme="https://marsgt.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>OpenWRT路由器设置界面中的Lua填坑</title>
    <link href="https://marsgt.github.io/2019/03/05/OpenWRT%E8%B7%AF%E7%94%B1%E5%99%A8%E8%AE%BE%E7%BD%AE%E7%95%8C%E9%9D%A2%E4%B8%AD%E7%9A%84Lua%E5%A1%AB%E5%9D%91/"/>
    <id>https://marsgt.github.io/2019/03/05/OpenWRT路由器设置界面中的Lua填坑/</id>
    <published>2019-03-05T02:18:50.000Z</published>
    <updated>2019-03-08T00:54:45.671Z</updated>
    
    <content type="html"><![CDATA[<p>刚结束一个急活，主要是整理某个 OpenWRT 路由的设置界面，网页服务主要用的是 Nginx，网页用的是 BackBone 和 jQuery 配合，后端设置服务主要用的是 Lua（由 Nginx 代理）调用 OpenWRT 的 UCI 和 ubus。一开始我以为只需要前端稍微调整下就行了，后来发现后边跟着的 Lua 得一起整，顺带补了不少 OpenWRT 的基础知识，下边简单梳(还)理(债)……    <a id="more"></a></p><h2 id="UCI"><a href="#UCI" class="headerlink" title="UCI"></a>UCI</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>UCI 是“Unified Configuration Interface”（统一配置界面）的缩写，是 OpenWrt 系统的核心配置框架，它的主要作用是整合系统里不同的设置项，并提供一个统一的接口。OpenWrt 系统配置文件默认被集中放在了 <code>/etc/config</code> 这里（当然也可以放在其它地方），这些 UCI 文件有自己特殊的语法，比如一个典型的无线配置可能是：</p><pre><code>config wifi-device &#39;radio0&#39;    option type &#39;mac80211&#39;    option channel &#39;auto&#39;    option hwmode &#39;11g&#39;    option path &#39;platform/qca953x_wmac&#39;    option htmode &#39;HT20&#39;    option disabled &#39;0&#39;config wifi-iface    option ifname &#39;wlan0&#39;    option device &#39;radio0&#39;    option network &#39;lan&#39;    option mode &#39;ap&#39;    option encryption &#39;none&#39;    option ssid &#39;TestSSID&#39;</code></pre><p>这里以 config 开头的行代表了一个 config 节点，其格式为：<br><code>config &#39;section-type&#39; &#39;section&#39;</code><br>section-type 处的值是节点类型，而 section 则是节点名称。另外，config 节点允许匿名节点的存在（意即直接跳过<code>&#39;section&#39;</code>，就像第二个的 config 节点那样，<code>wifi-iface</code>只是节点类型而不是节点名，这里要注意），引号在 UCI 文件中也不是必须的，严格来讲只有值里带有空格或制表符时才需要使用，使用时也要注意，其必须成对出现才有效（比如一对单引号或者一对双引号，交叉使用会导致语法错误）。<br>以 option 开头的是选项，格式为：<br><code>option &#39;key&#39; &#39;value&#39;</code><br>这是比较典型的 key-value 格式，就不再赘述了。除此之外，还有种 list 列表选项，被用来描述形如数组类的设置，格式与 option 非常相似：<br><code>list &#39;list-key&#39; &#39;list-value&#39;</code><br>如果 list-key 相同的话，那么这实际上就是个数组式的设置项，举个栗子，system 设置里的 NTP：</p><pre><code>config timeserver &#39;ntp&#39;    option enabled &#39;1&#39;    option enable_server &#39;0&#39;    list server &#39;0.openwrt.pool.ntp.org&#39;    list server &#39;1.openwrt.pool.ntp.org&#39;    list server &#39;2.openwrt.pool.ntp.org&#39;    list server &#39;3.openwrt.pool.ntp.org&#39;</code></pre><p>这里的 NTP Server 设置实际上就是个数组。</p><h3 id="UCI-的调用"><a href="#UCI-的调用" class="headerlink" title="UCI 的调用"></a>UCI 的调用</h3><p>在 OpenWRT 系统里调用 UCI 一般有两种方法，通过命令行或者是调用 Lua API。这里首先说命令行。<br>OpenWRT 官方文档里提到，使用awk、grep等命令来解析Openwrt的配置文件是低效和不明智的做法，并建议在类似的场景下，应该优先使用命令行形式调用。<br>UCI 命令行语法为（在命令行下直接输入 <code>uci</code> 即可看到）：</p><pre><code>用法: uci [&lt;options&gt;] &lt;command&gt; [&lt;arguments&gt;]命令:    batch    export     [&lt;config&gt;]    import     [&lt;config&gt;]    changes    [&lt;config&gt;]    commit     [&lt;config&gt;]    add        &lt;config&gt; &lt;section-type&gt;    add_list   &lt;config&gt;.&lt;section&gt;.&lt;option&gt;=&lt;string&gt;    show       [&lt;config&gt;[.&lt;section&gt;[.&lt;option&gt;]]]    get        &lt;config&gt;.&lt;section&gt;[.&lt;option&gt;]    set        &lt;config&gt;.&lt;section&gt;[.&lt;option&gt;]=&lt;value&gt;    delete     &lt;config&gt;[.&lt;section[.&lt;option&gt;]]    rename     &lt;config&gt;.&lt;section&gt;[.&lt;option&gt;]=&lt;name&gt;    revert     &lt;config&gt;[.&lt;section&gt;[.&lt;option&gt;]]参数:    -c &lt;path&gt;  设置用于存储配置文件的文件夹 (默认位于: /etc/config)    -d &lt;str&gt;   使用&#39;uci show&#39;命令时，为 list 类型的值设置分隔符    -f &lt;file&gt;  使用指定的 &lt;file&gt; 作为输入，而不是默认的 stdin    -m         导入时，合并数据到现有的设置中    -n         导出时，命名匿名节 (默认)    -N         不要命名匿名节    -p &lt;path&gt;  添加一个配置文件的搜索路径    -P &lt;path&gt;  添加一个配置文件的搜索路径并将其作为默认设置    -q         安静默认 (不打印错误信息)    -s         强制使用严格模式 (在解析出现错误时停止，默认)    -S         关闭严格模式    -X         在&#39;show&#39;命令上显示匿名节点ID (如果有的话)</code></pre><p>平时（命令行下）常用的主要是 <code>show</code>，<code>get</code>，<code>set</code>，<code>changes</code> 和 <code>commit</code> 这几个。<br>使用 UCI 时，需要特别注意下它的读写规则：UCI 在读取时，会首先读取内存中的缓存，而后才是文件；而写入则与此相反，增删改都是在操作缓存，需要手动提交才会将设置项写入到系统中。所以，在编写路由设置系统时，最后的提交操作是切不可忘的一步。<br>还有一种调用 UCI 的方法，是使用 Lua，文末的参考内容[3]中有详细的 API 列表（记得在开头用 <code>local uci = require &quot;los.uci&quot;.cursor()</code> 语句引入）。<br>在使用 Lua 调用时，有个需要注意的点是匿名节点，比如上文中的无线配置里，有个 <code>wifi-iface</code> 类型的匿名节点，在命令行里使用 <code>uci show wireless</code> 可以看到：</p><pre><code>wireless.radio1=wifi-devicewireless.radio1.type=&#39;mac80211&#39;wireless.radio1.channel=&#39;auto&#39;wireless.radio1.hwmode=&#39;11g&#39;wireless.radio1.path=&#39;platform/qca953x_wmac&#39;wireless.radio1.htmode=&#39;HT20&#39;wireless.radio1.disabled=&#39;0&#39;wireless.@wifi-iface[0]=wifi-ifacewireless.@wifi-iface[0].ifname=&#39;wlan0&#39;wireless.@wifi-iface[0].device=&#39;mt7620&#39;wireless.@wifi-iface[0].network=&#39;lan&#39;wireless.@wifi-iface[0].mode=&#39;ap&#39;wireless.@wifi-iface[0].encryption=&#39;none&#39;wireless.@wifi-iface[0].ssid=&#39;TestSSID&#39;</code></pre><p>这里可以看到很多键名类似 <code>@wifi-iface[0]</code> 的设置项，这就是匿名节点的设置项了。如果在命令行里加入 <code>-X</code> 参数变成 <code>uci -X show wireless</code>，则可以看到：</p><pre><code>wireless.radio1=wifi-devicewireless.radio1.type=&#39;mac80211&#39;wireless.radio1.channel=&#39;auto&#39;wireless.radio1.hwmode=&#39;11g&#39;wireless.radio1.path=&#39;platform/qca953x_wmac&#39;wireless.radio1.htmode=&#39;HT20&#39;wireless.radio1.disabled=&#39;0&#39;wireless.cfg043579=wifi-ifacewireless.cfg043579.ifname=&#39;wlan1&#39;wireless.cfg043579.device=&#39;radio1&#39;wireless.cfg043579.network=&#39;lan&#39;wireless.cfg043579.mode=&#39;ap&#39;wireless.cfg043579.encryption=&#39;none&#39;wireless.cfg043579.ssid=&#39;TestSSID&#39;</code></pre><p>这时 <code>@wifi-iface[0]</code> 变成了 <code>cfg043579</code>，这才是这个匿名节点真实的引用名（系统自动生成的）。<br>而同样的，在撰写相对应的 Lua 语句时，也不能写成：</p><pre class=" language-lua"><code class="language-lua">uci<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"wireless"</span><span class="token punctuation">,</span> <span class="token string">"@wifi-iface[0]"</span><span class="token punctuation">,</span> <span class="token string">"ssid"</span><span class="token punctuation">,</span> <span class="token string">"NewSSID"</span><span class="token punctuation">)</span></code></pre><p>虽然可以在命令行执行 <code>uci set wireless.@wifi-iface[0].ssid=&#39;NewSSID&#39;</code>，但是在 Lua 上这么写系统是不会鸟你的（更何况还有个隐性的问题，是设置被改动过后，匿名节点的位置有可能会变，比如会跑到 <code>@wifi-iface[1]</code> 去，这可能会发生在拥有多个匿名节点的配置文件里）。所以这个时候，就需要使用 <code>uci:foreach</code> 去遍历某个设置类型的所有设置节点（注：返回 false 终止遍历），在遍历出的内容里，有几个特殊的、键名以英文字符 <code>.</code> 开头的成员：</p><ul>    <li><code>[.index]</code>: 设置节点的索引</li>    <li><code>[.name]</code>: 设置节点的名称（即真实的引用名，<code>cfg043579</code> 这种）</li>    <li><code>[.type]</code>: 设置节点的类型（如 <code>wifi-iface</code>）</li>    <li><code>[.anonymous]</code>: 指示该设置节点是否匿名</li></ul><p>这样，通过遍历所有项目并筛选符合条件的配置项，将 <code>[.name]</code> 中的内容缓存下来，就可以用：</p><pre class=" language-lua"><code class="language-lua">uci<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"wireless"</span><span class="token punctuation">,</span> <span class="token string">"cfg043579"</span><span class="token punctuation">,</span> <span class="token string">"ssid"</span><span class="token punctuation">,</span> <span class="token string">"NewSSID"</span><span class="token punctuation">)</span></code></pre><p>这种方法去调用了。<br>这里放个自己写的用于遍历无线设置的函数（双频设备，每个频段只有一个信号，通过设备 ID 来识别）：</p><pre class=" language-lua"><code class="language-lua"><span class="token keyword">function</span> <span class="token function">getWirelessInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> wifiConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    uci<span class="token punctuation">:</span><span class="token function">foreach</span><span class="token punctuation">(</span>        <span class="token string">"wireless"</span><span class="token punctuation">,</span>        <span class="token string">"wifi-iface"</span><span class="token punctuation">,</span>        <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token keyword">if</span> s<span class="token punctuation">.</span>device <span class="token operator">==</span> <span class="token string">"mt7620"</span> <span class="token keyword">then</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> wifiConfig<span class="token punctuation">.</span>mt7620 <span class="token keyword">then</span>                    wifiConfig<span class="token punctuation">[</span><span class="token string">"mt7620"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                <span class="token keyword">end</span>                <span class="token keyword">local</span> key <span class="token operator">=</span> <span class="token string">""</span>                <span class="token keyword">if</span> s<span class="token punctuation">.</span>key <span class="token keyword">then</span>                    key <span class="token operator">=</span> s<span class="token punctuation">.</span>key                <span class="token keyword">end</span>                wifiConfig<span class="token punctuation">.</span>mt7620 <span class="token operator">=</span> <span class="token punctuation">{</span>                    name <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token string">".name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    ssid <span class="token operator">=</span> s<span class="token punctuation">.</span>ssid<span class="token punctuation">,</span>                    ency <span class="token operator">=</span> s<span class="token punctuation">.</span>encryption<span class="token punctuation">,</span>                    pass <span class="token operator">=</span> key                <span class="token punctuation">}</span>            <span class="token keyword">elseif</span> s<span class="token punctuation">.</span>device <span class="token operator">==</span> <span class="token string">"mt7612"</span> <span class="token keyword">then</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> wifiConfig<span class="token punctuation">.</span>mt7612 <span class="token keyword">then</span>                    wifiConfig<span class="token punctuation">[</span><span class="token string">"mt7612"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                <span class="token keyword">end</span>                <span class="token keyword">local</span> key <span class="token operator">=</span> <span class="token string">""</span>                <span class="token keyword">if</span> s<span class="token punctuation">.</span>key <span class="token keyword">then</span>                    key <span class="token operator">=</span> s<span class="token punctuation">.</span>key                <span class="token keyword">end</span>                wifiConfig<span class="token punctuation">.</span>mt7612 <span class="token operator">=</span> <span class="token punctuation">{</span>                    name <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token string">".name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    ssid <span class="token operator">=</span> s<span class="token punctuation">.</span>ssid<span class="token punctuation">,</span>                    ency <span class="token operator">=</span> s<span class="token punctuation">.</span>encryption<span class="token punctuation">,</span>                    pass <span class="token operator">=</span> key                <span class="token punctuation">}</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> wifiConfig<span class="token keyword">end</span></code></pre><p>不过，在实践中，我认为最有效的手段是将匿名节点转化成普通的具名节点，这样 Lua 就可以直接调用，比写挨个遍历内容的逻辑要简单也清晰的多。</p><p>下边再说说 ubus。</p><h2 id="ubus"><a href="#ubus" class="headerlink" title="ubus"></a>ubus</h2><p>ubus 即是 OpenWrt micro bus 架构，是 OpenWrt 为了提供守护进程和应用程序间的通讯而开发的项目。简单来说，想获取系统运行的一些状态，是可以用 ubus 来查看的，而且相比用 UCI 查询，由于 ubus 获取的直接是系统信息而不是设置项，所以可以避免由于错误配置带来的配置项与系统状态不符合的问题。也是因为这个原因，我推荐读取设置(状态)时用 ubus，写入设置时用 UCI。<br>当然 ubus 也并不是没有问题，目前比较通用的说法是，在数据内容超过 60k 时不建议用，另外如果有多线程、或者逻辑上有递归时也不建议用（指令发出以后，接受到的信息可能是另一条指令的返回内容）。</p><h3 id="ubus-的调用"><a href="#ubus-的调用" class="headerlink" title="ubus 的调用"></a>ubus 的调用</h3><p>同 UCI 类似，调用 ubus 也分为命令行方式与 Lua 调用方式。而与 UCI 将设置文件命名为包（package）不同的是，ubus 将其调度单位称为“命名空间”（namespace），系统后台会默认驻留一个名为 ubusd 的守护进程，使用友好的 JSON 格式进行交互。<br>在命令行中输入 <code>ubus list</code> 就可以看到所有通过RPC服务器注册的命名空间：</p><pre><code>dhcphostapd.wlan0hostapd.wlan1lognetworknetwork.devicenetwork.interfacenetwork.interface.lannetwork.interface.loopbacknetwork.interface.wannetwork.interface.wan6network.wirelessservicesessionsystemuci</code></pre><p>加个参数变成 <code>ubus -v list</code>，就可以详细列出这些命名空间所提供的方法了。调用方法用 <code>call</code> 关键字，比如，查看系统 WiFi 状态就可以用：</p><pre class=" language-bash"><code class="language-bash">ubus call network.wireless status <span class="token string">'{}'</span></code></pre><p><em>（参数一定要带上，即使为空。格式为 JSON）</em></p><p>除此以外，还有：</p><ul>    <li>获取系统信息（上线时间、内存用量、SWAP信息等）        <pre class=" language-bash"><code class="language-bash">ubus call system info <span class="token string">'{}'</span></code></pre>    </li>    <li>获取设备信息（设备型号、固件版本等）        <pre class=" language-bash"><code class="language-bash">ubus call system board <span class="token string">'{}'</span></code></pre>    </li>    <li>获取 WiFi 上已连接的客户端        <pre class=" language-bash"><code class="language-bash">ubus call hostapd.wlan0 get_clients <span class="token string">'{}'</span></code></pre>    </li>    <li>获取路由物理设备信息（如 MAC 型号、工作状态等）        <pre class=" language-bash"><code class="language-bash">ubus call network.device status <span class="token string">'{"name":"eth0"}'</span></code></pre> 等等。<br>除了命令行直接调用外，ubus 也可以使用 Lua 调用，由于没有 UCI 那劳什子匿名节点的问题，所以直接用        <pre class=" language-lua"><code class="language-lua"><span class="token keyword">local</span> ubus <span class="token operator">=</span> require <span class="token string">"ubus"</span></code></pre> 引入，在调用前用        <pre class=" language-lua"><code class="language-lua"><span class="token keyword">local</span> conn <span class="token operator">=</span> ubus<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> 连接服务，在调用后用        <pre class=" language-lua"><code class="language-lua">conn<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> 关闭就好。<br>比如我自己写的一段从 ubus 上拿 WiFi 信息的函数：        <pre class=" language-lua"><code class="language-lua"><span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">getWirelessStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">local</span> conn <span class="token operator">=</span> ubus<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token keyword">not</span> conn <span class="token keyword">then</span>      <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to connect to ubusd"</span><span class="token punctuation">)</span>  <span class="token keyword">end</span>  <span class="token keyword">local</span> info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">local</span> status <span class="token operator">=</span> conn<span class="token punctuation">:</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"network.wireless"</span><span class="token punctuation">,</span> <span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token keyword">do</span>      info<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v  <span class="token keyword">end</span>  conn<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> info<span class="token keyword">end</span></code></pre>    </li></ul><hr><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ol>    <li><a href="https://openwrt.org/start?id=zh/docs/guide-user/base-system/uci" target="_blank" rel="noopener">OpenWRT官网 - UCI系统</a></li>    <li><a href="https://openwrt.org/start?id=zh/docs/techref/uci" target="_blank" rel="noopener">OpenWRT官网 - UCI技术参考资料</a></li>    <li><a href="https://htmlpreview.github.io/?https://raw.githubusercontent.com/openwrt/luci/master/documentation/api/modules/luci.model.uci.html" target="_blank" rel="noopener">LuaDoc - luci.model.uci (英)</a></li>    <li><a href="https://openwrt.org/start?id=zh/docs/techref/ubus" target="_blank" rel="noopener">OpenWRT官网 - ubus</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚结束一个急活，主要是整理某个 OpenWRT 路由的设置界面，网页服务主要用的是 Nginx，网页用的是 BackBone 和 jQuery 配合，后端设置服务主要用的是 Lua（由 Nginx 代理）调用 OpenWRT 的 UCI 和 ubus。一开始我以为只需要前端稍微调整下就行了，后来发现后边跟着的 Lua 得一起整，顺带补了不少 OpenWRT 的基础知识，下边简单梳(还)理(债)……
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="随手记" scheme="https://marsgt.github.io/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
      <category term="OpenWRT" scheme="https://marsgt.github.io/tags/OpenWRT/"/>
    
  </entry>
  
  <entry>
    <title>Git提交信息样式指南</title>
    <link href="https://marsgt.github.io/2019/01/24/Git%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E6%A0%B7%E5%BC%8F%E6%8C%87%E5%8D%97/"/>
    <id>https://marsgt.github.io/2019/01/24/Git提交信息样式指南/</id>
    <published>2019-01-24T02:34:53.000Z</published>
    <updated>2019-01-24T03:00:12.124Z</updated>
    
    <content type="html"><![CDATA[<blockquote>    <p>本文节选自优达学城<a href="https://s3.amazonaws.com/video.udacity-data.com/topher/2018/March/5a995468_udacity/udacity.html#4" target="_blank" rel="noopener">Git 提交信息样式指南</a>，部分内容略有修改。</p></blockquote><a id="more"></a><hr><h3 id="提交信息"><a href="#提交信息" class="headerlink" title="提交信息"></a>提交信息</h3><h4 id="信息结构"><a href="#信息结构" class="headerlink" title="信息结构"></a>信息结构</h4><p>提交信息由三个不同的部分构成，这些部分均由空行分隔：标题、可选的消息体和可选的注释。其布局大致如此：</p><pre class=" language-text"><code class="language-text">类型：主题消息正文注释</code></pre><p>标题由消息类型和主题构成。</p><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><p>类型位于在标题内，有以下几种可能：</p><ul>    <li><strong>feature</strong>： 新功能</li>    <li><strong>fix</strong>：错误修复</li>    <li><strong>docs</strong>：文档修改</li>    <li><strong>style</strong>：格式、分号缺失等，代码无变动</li>    <li><strong>refactor</strong>：生产代码重构</li>    <li><strong>test</strong>：测试添加、测试重构等，生产代码无变动</li>    <li><strong>chore</strong>：构建任务更新、程序包管理器配置等，生产代码无变动。</li></ul><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>主题不得超过50个字符，首字母大写，末尾不加句号。 以祈使语气描述提交的任务，而不是其已完成的任务。例如，使用 <strong>change</strong> …，而不是 changed 或 changes 。</p><h4 id="信息正文"><a href="#信息正文" class="headerlink" title="信息正文"></a>信息正文</h4><p>并不是所有的提交信息都复杂到需要主体，因此这是可选内容，仅在提交信息需要一定的解释和语境时使用。消息体是用于解释提交任务的内容和原因，而不是方法。<br>在编写正文时，需要在标题和正文间加一个空行，且每行的内容应控制在72个字符内。</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>注释是可选内容，用于引用 issue 的 ID 。</p><h4 id="提交信息示例"><a href="#提交信息示例" class="headerlink" title="提交信息示例"></a>提交信息示例</h4><pre class=" language-text"><code class="language-text">feature: 总结变动的内容，保持在50个字符内如有需要，使用更详细的说明性文字，将其大概控制在72个字符。在部分语境中，第一行被视为提交信息的主题，余下的文本被视为主体。分隔总结与主体的空行十分重要（除非你完全忽略主体）；否则`log`、`shortlog`和`rebase`等多个工具容易发生混淆。解释该提交信息所解决的问题，说明你进行该变动的原因，而不是方法（代码本身可以解释方法）。该变动是否存在副作用或其他直觉性后果？在这里进行解释。后续段落前需加空行。可以列出要点- 通常情况下，要点会使用空格加上连字符或星号，中间用空行分隔，但该规定存在差别。如果你使用问题追踪，将其引用放在末尾，例如：解决了问题：#123另见：#456, #789</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
    &lt;p&gt;本文节选自优达学城&lt;a href=&quot;https://s3.amazonaws.com/video.udacity-data.com/topher/2018/March/5a995468_udacity/udacity.html#4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git 提交信息样式指南&lt;/a&gt;，部分内容略有修改。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="版本管理" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="Git" scheme="https://marsgt.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>搭建带有Web管理功能的私有Docker Registry</title>
    <link href="https://marsgt.github.io/2019/01/23/%E6%90%AD%E5%BB%BA%E5%B8%A6%E6%9C%89Web%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD%E7%9A%84%E7%A7%81%E6%9C%89Docker-Registry/"/>
    <id>https://marsgt.github.io/2019/01/23/搭建带有Web管理功能的私有Docker-Registry/</id>
    <published>2019-01-23T05:47:29.000Z</published>
    <updated>2019-01-23T06:13:04.938Z</updated>
    
    <content type="html"><![CDATA[<blockquote>    <p>本文记录了搭建简易的(无WebUI)私有Docker Registry服务以及推送镜像的相关内容</p></blockquote><a id="more"></a><hr><ol>    <li>搭建单一Docker Registry请见《<a href="https://marsgt.github.io/2019/01/23/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89Docker-Registry%E4%BB%A5%E5%8F%8A%E6%8E%A8%E9%80%81%E9%95%9C%E5%83%8F/">搭建私有Docker Registry以及推送镜像</a>》，本文不再赘述</li>    <li>搭建带有Web管理功能的私有Docker Registry，分别需要Nginx（域名解析及反代，这里直接使用宿主机上编译好的）、Docker Registry及<a href="https://github.com/mkuchin/docker-registry-web" target="_blank" rel="noopener">Docker Registry Web</a>（提供Web管理界面）</li>    <li>为了配置方便，关掉了用户名密码功能，改为使用阿里云安全组直接限制80端口的入方向IP(外网为固定IP或者从某一固定IP代理)</li>    <li>        <p>使用Docker-Compose编排，配置文件：</p>        <pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span> <span class="token key atrule">registry-srv</span><span class="token punctuation">:</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> registry<span class="token punctuation">:</span><span class="token number">2.4</span> <span class="token key atrule">ports</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token string">"9527:5000"</span> <span class="token key atrule">volumes</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> /var/lib/docker/registry<span class="token punctuation">:</span>/var/lib/registry <span class="token key atrule">environment</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/var/lib/registry   <span class="token punctuation">-</span> REGISTRY_STORAGE_DELETE_ENABLED=true <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token key atrule">registry-web</span><span class="token punctuation">:</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> hyper/docker<span class="token punctuation">-</span>registry<span class="token punctuation">-</span>web <span class="token key atrule">ports</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token string">"29527:8080"</span> <span class="token key atrule">volumes</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> /var/lib/docker/registry/web<span class="token punctuation">:</span>/data <span class="token key atrule">environment</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> REGISTRY_URL=http<span class="token punctuation">:</span>//172.19.0.1<span class="token punctuation">:</span>9527/v2   <span class="token punctuation">-</span> REGISTRY_NAME=registry.hahahaha.com   <span class="token punctuation">-</span> REGISTRY_READONLY=false <span class="token key atrule">restart</span><span class="token punctuation">:</span> always <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> registry<span class="token punctuation">-</span>srv</code></pre>    </li>    <li>registry-srv是私有Docker Registry服务，用的是简配（没上配置文件，只映射了部分环境变量和容器存储位置。把环境变量的“REGISTRY”前缀去掉，改成小写再把下划线改写成层级，就是YAML配置）；registry-web是Web界面服务，registry.hahahaha.com的DNS解析和阿里云安全组需要配置下，环境变量里“REGISTRYURL”是需要连接到的私有Docker Registry服务，这里的172.x.0.1的地址是和容器同网段的宿主机地址（不要用URL，访问不了；也不要用localhost，容器内的localhost不会指向宿主机）</li>    <li>然后需要配一下Nginx的反代。分别发到上文的9527和29527端口即可。</li>    <li>在Docker-Compose配置文件使用<code>docker-compose up -d</code>命令拉起服务，然后用<code>docker-compose logs -f</code>命令监控，直到出来“Server startup……”等内容时，<code>nginx -s reload</code>，然后访问registry.hahahaha.com就能看到管理界面了。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
    &lt;p&gt;本文记录了搭建简易的(无WebUI)私有Docker Registry服务以及推送镜像的相关内容&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="开发工具" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="随手记" scheme="https://marsgt.github.io/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
      <category term="部署" scheme="https://marsgt.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Docker" scheme="https://marsgt.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>搭建私有Docker Registry以及推送镜像</title>
    <link href="https://marsgt.github.io/2019/01/23/%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89Docker-Registry%E4%BB%A5%E5%8F%8A%E6%8E%A8%E9%80%81%E9%95%9C%E5%83%8F/"/>
    <id>https://marsgt.github.io/2019/01/23/搭建私有Docker-Registry以及推送镜像/</id>
    <published>2019-01-23T05:26:41.000Z</published>
    <updated>2019-01-23T06:11:40.511Z</updated>
    
    <content type="html"><![CDATA[<blockquote>    <p>本文记录了搭建简易的(无WebUI)私有Docker Registry服务以及推送镜像的相关内容</p></blockquote><a id="more"></a><hr><ol>    <li>首先需要生成连接用的用户名密码，用htpasswd。<br>安装直接<code>yum install -y httpd-tools</code>，然后<code>htpasswd -cB /home/.passwd hahahaha</code></li>    <li>或者上边也可以直接用registry镜像中的htpasswd代替，<br>使用<code>docker run --entrypoint htpasswd registry -Bbn \[用户名] \[密码] &gt;&gt; /etc/docker/auth/registry.htpasswd</code>来生成</li>    <li>用户名hahahaha，密码Haha123，服务搭在公网88.88.88.88主机上，端口19527</li>    <li>构建指令：        <pre class=" language-bash"><code class="language-bash">docker run -d -p 9527:5000 --name registry --restart<span class="token operator">=</span>always \\-v /etc/docker/registry:/var/lib/registry \\-v /etc/docker/auth:/auth \\-e REGISTRY_AUTH<span class="token operator">=</span>htpasswd \\-e REGISTRY_AUTH_HTPASSWD_REALM<span class="token operator">=</span><span class="token string">"Registry Realm"</span> \\-e REGISTRY_AUTH_HTPASSWD_PATH<span class="token operator">=</span>/auth/passwd \\registry</code></pre>    </li>    <li>详细教程可以参考：<a href="https://www.yanning.wang/archives/599.html" target="_blank" rel="noopener">Docker私有Registry搭建教程</a></li>    <li>/etc/docker/daemon.json文件中的内容建议改为：        <pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">"insecure-registries"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"88.88.88.88:9527"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>    </li>    <li>PUSH镜像前，需新增镜像Tag，用<code>docker tag</code>命令将其转成<code>URL[:PORT]/REPO:TAG</code>这种格式，比如用：<code>docker tag hahahaha/admin-test:develop 88.88.88.88:9527/hahahaha/admin-test:develop</code>命令代表准备将 hahahaha/admin-test 镜像推到 88.88.88.88:9527</li>    <li>然后用<code>docker login</code>登录</li>    <li>接着用<code>docker push 88.88.88.88:9527/hahahaha/admin-test:develop</code>直接推就行</li>    <li>推完以后打开浏览器，输入<code>http://88.88.88.88:9527/v2/</code>登录一下，然后再打开<code>http://88.88.88.88:9527/v2/_catalog</code>就能看到刚推上去的镜像了。（Docker Registry HTTP API V2）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
    &lt;p&gt;本文记录了搭建简易的(无WebUI)私有Docker Registry服务以及推送镜像的相关内容&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="开发工具" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="随手记" scheme="https://marsgt.github.io/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
      <category term="部署" scheme="https://marsgt.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Docker" scheme="https://marsgt.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>内网服务器部署Gitea的简单记录</title>
    <link href="https://marsgt.github.io/2019/01/23/%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2Gitea%E7%9A%84%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"/>
    <id>https://marsgt.github.io/2019/01/23/内网服务器部署Gitea的简单记录/</id>
    <published>2019-01-23T02:36:41.000Z</published>
    <updated>2019-01-23T06:11:47.880Z</updated>
    
    <content type="html"><![CDATA[<blockquote>    <p>对部署Gitea的简单记录</p></blockquote><a id="more"></a><hr><p>主机：CentOS<br>选型：用了DockerCE+Gitea</p><blockquote>    <p>DockerCE和Docker的区别在，前者是最新版（免费的社区版，17.X+），后者是老版本（1.X+），另外还有个企业版是DockerEE</p></blockquote><p>Gitea是Gogs的一个开源分支版本，因为Gogs的Docker版本一直有点问题，所以就改用它了。</p><p>首先需要部署Docker。默认会带老版本的Docker，这里需要全部卸载：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum remove docker docker-common docker-selinux docker-engine</code></pre><p>然后安装需要的软件包：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2</code></pre><p>添加安装源并加到本地缓存：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/docker-ce.repo<span class="token function">sudo</span> yum makecache fast</code></pre><p>安装docker-ce并启动（加自启）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce<span class="token function">sudo</span> systemctl start docker<span class="token function">sudo</span> <span class="token function">chkconfig</span> docker on</code></pre><p>docker官方的镜像服务基本跑不动，所以需要把镜像源改成国内的加速地址。改地址一般有两种方式（详细可参阅<a href="https://www.docker-cn.com/registry-mirror" target="_blank" rel="noopener">Docker 中国官方镜像加速</a>），一是在pull镜像时，在前边加上加速地址的URL，比如要下载<code>gitea/gitea:latest</code>，就可以：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> docker pull registry.docker-cn.com/gitea/gitea:latest</code></pre><p>或者还有种方式是更改<code>/etc/docker/daemon.json</code>文件，编辑为：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>这样就可以直接用：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> docker pull gitea/gitea:latest</code></pre><p>来下载了。</p><p>这时等进度条走完，就已经下载好了Gitea的镜像，可以用：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> docker image <span class="token function">ls</span></code></pre><p>来查看系统里已有的镜像；这里会看到镜像会有个ImageID，这个下边有用。</p><p>新建一个目录，用于将容器内的存储映射到当前系统内：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /var/lib/gitea</code></pre><p>然后启动容器：</p><pre class=" language-bash"><code class="language-bash">docker run -d --name<span class="token operator">=</span>gitea -p 10022:22 -p 10080:3000 -v /var/lib/gitea:/data 737fb3dad067</code></pre><p>其中<code>-d</code>参数是后台运行，<code>-p</code>参数是将容器内端口映射到系统端口（系统:容器内），<code>-v</code>参数是将容器内存储位置映射到系统相应位置（系统:容器内），最后一行ID是ImageID，以实际查到的为准（不写标签主要是防止服务器慢时重复下载，这里也可以直接写镜像URL直接下载启动）</p><p>打开<code>192.168.1.10:10080</code>，就可以看到WebUI了。</p><p>配置文件位置：/var/lib/gitea/gitea/conf/app.ini（<a href="https://docs.gitea.io/zh-cn/config-cheat-sheet/" target="_blank" rel="noopener">配置项参考</a>）</p><p>配置后需要重启下容器：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> docker restart gitea</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
    &lt;p&gt;对部署Gitea的简单记录&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="开发工具" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="随手记" scheme="https://marsgt.github.io/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
      <category term="Gitea" scheme="https://marsgt.github.io/tags/Gitea/"/>
    
      <category term="部署" scheme="https://marsgt.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>在NexT主题下添加Gitalk的简单记录</title>
    <link href="https://marsgt.github.io/2018/12/29/%E5%9C%A8NexT%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0Gitalk%E7%9A%84%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"/>
    <id>https://marsgt.github.io/2018/12/29/在NexT主题下添加Gitalk的简单记录/</id>
    <published>2018-12-29T07:08:08.000Z</published>
    <updated>2018-12-30T12:02:41.444Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录下如何在NexT主题下添加Gitalk评论插件。    <a id="more"></a></p><p><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>是一个基于GitHub Issue的评论插件，优点是可以利用GitHub Pages自带的issue来做评论功能，相对一些NexT主题自带的评论插件来说，因为不用去注册第三方平台帐号，也不用做域名备案（连域名都没😂……还要啥🚲啊），所以更加简便易行。</p><p>好，下边直接说步骤吧：<br>首先，要去申请个<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">GitHub Application</a>，用来授权给Gitalk插件读取和写入GitHub Pages项目issue内容。Homepage URL和Authorization callback URL就写成博客地址就行，Authorization name和Authorization description随便写就可以。填好提交之后会生成一个Client ID和Client Secret，内容复制备用；<br>接下来，找到NexT主题目录下的<code>layout\_custom\sidebar.swig</code>这个文件，在其中加入：</p><pre class=" language-swig"><code class="language-swig">{% if page.comments and config.gitalk.enable %}    <link rel="stylesheet" href="{{ config.gitalk.gitalk_css }}">    <script src="{{ config.gitalk.gitalk_js }}"></script>    <script src="{{ config.gitalk.md5 }}"></script>    <script>        var gitalk = new Gitalk({            clientID: '{{ config.gitalk.clientID }}',            clientSecret: '{{ config.gitalk.clientSecret }}',            repo: '{{ config.gitalk.repo }}',            owner: '{{ config.gitalk.owner }}',            admin: '{{ config.gitalk.admin }}',            id: md5(location.pathname),            distractionFreeMode: 'true',            pagerDirection: 'first'        });        var div = document.createElement('div');        div.setAttribute("id", "gitalk_comments");        div.setAttribute("class", "post-nav");        var bro = document.getElementById('posts').getElementsByTagName('article');        bro = bro[0].getElementsByClassName('post-block');        bro = bro[0].getElementsByTagName('footer');        bro = bro[0];        bro.appendChild(div);        gitalk.render('gitalk_comments');    </script>{% endif %}</code></pre><p>然后找到Hexo全局<code>_config.yml</code>配置文件，在其中加入：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Gitalk评论</span><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">owner</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#Github用户名#</span>    <span class="token key atrule">admin</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#Github用户名#</span>    <span class="token key atrule">repo</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#Github Pages项目名#</span>    <span class="token key atrule">clientID</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#clientID#</span>    <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#clientSecret#</span>    <span class="token key atrule">gitalk_css</span><span class="token punctuation">:</span> //cdn.bootcss.com/gitalk/1.4.1/gitalk.min.css    <span class="token key atrule">gitalk_js</span><span class="token punctuation">:</span> //cdn.bootcss.com/gitalk/1.4.1/gitalk.min.js    <span class="token key atrule">md5</span><span class="token punctuation">:</span> //cdn.bootcss.com/blueimp<span class="token punctuation">-</span>md5/2.10.0/js/md5.min.js</code></pre><p>最后<code>hexo clean</code>清下缓存，再<code>hexo g</code>重新生成就可以了。</p><hr><p>写这篇文章的时候，才发现我所用的NexT主题版本中已经集成了gitalk，用的是<a href="https://asdfv1929.github.io/2018/01/20/gitalk/" target="_blank" rel="noopener">Hexo NexT主题中集成gitalk评论系统</a>中的方案，所以在NexT主题下的<code>_config.yml</code>配置文件中的gitalk相应配置项填一下就能开启了。不过需要注意的是这个版本没用<code>pagerDirection</code>这个配置项，如果需要的话在NexT主题的<code>layout\_third-party\comments\gitalk.swig</code>文件中line:30加个<code>,pagerDirection: </code>然后在配置里加一行<code>pager_direction</code>的配置就行了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单记录下如何在NexT主题下添加Gitalk评论插件。
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Hexo" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/Hexo/"/>
    
    
      <category term="随手记" scheme="https://marsgt.github.io/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
      <category term="Hexo" scheme="https://marsgt.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>PHP上的SQLite初体验</title>
    <link href="https://marsgt.github.io/2018/12/20/PHP%E4%B8%8A%E7%9A%84SQLite%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://marsgt.github.io/2018/12/20/PHP上的SQLite初体验/</id>
    <published>2018-12-20T13:32:03.000Z</published>
    <updated>2018-12-28T05:20:32.135Z</updated>
    
    <content type="html"><![CDATA[<p>这两天在折腾一个小的推广页面，里边有个需求是提交表单和数据汇总，估了下压力应该不大，懒得再折腾MySQL服务了，就想试试SQLite。我后端主要是用PHP打配合，查了下文档，SQLite在PHP上主要有纯原生的SQLite扩展和数据库抽象层PDO(PHP数据对象)两种调用方式。由于之前写MySQL的时候接触过PDO，所以这次也优先选择了这种方式    <a id="more"></a>（主要是换个DSN就行了，可以节省一些学习成本😜）。<br>数据库还需要一个图形界面来打配合（需要展示数据的场景，我个人认为GUI会比CLI有优势；当然如果换成命令行也行），MySQL的时候有个现成的NaviCat for MySQL，但并不通用；所以我就上网去搜有什么软件可以用。最先映入眼帘的是SQLiteStudio，开源、绿色（Portable版本）、多平台，搜到的讨论也很多，就去下载下来试了下。喏：<br><img src="/images/1005972504-5971f5422fd38.png" alt="SQLiteStudio"><br>第一感觉就是：丑！丑爆了……不过丑可能是Qt的通病吧，暂且按下不表。但我选的语言配置是中文诶，连菜单都没覆盖到是什么鬼😤……好吧抛开这些不谈，软件基本能用，就先开工吧。</p><hr><p>既然有了工具辅助，那么就可以开始建库了。此处建议先行补一下SQLite的基础知识，我是直接看的菜鸟教程……权威倒不敢说，贵在简单。SQLite大概是最迷你的关系数据库系统了，小就小在没有很多大型数据库的各种高级功能，自然也可以做到相对轻量和快速。SQLite的类型系统不像MySQL那样默认支持SQL的所有数据类型，它使用一种类似解释型语言的动态类型系统，默认类型(即<code>Storage Class</code>，存储类型)只有<code>NULL</code>、<code>INTEGER</code>(整型)、<code>REAL</code>(浮点型)、<code>TEXT</code>(字符串)和<code>BLOB</code>(二进制)这几种；而在核心类型以外，还存在一种被称为类型关联(<code>Type Affinity</code>)的概念(菜鸟将此处译做“亲和类型”)，即将多个类型映射成几个近似的基本类型，以确保SQLite可以支持更多的类型。在具体实现上，相关的映射关系：</p><table>    <thead>        <tr>            <th style="text-align:center"><strong>来自语句中的类型</strong></th>            <th style="text-align:center"><strong>最终关联类型</strong></th>        </tr>    </thead>    <tbody>        <tr>            <td style="text-align:center">INT<br>INTEGER<br>TINYINT<br>SMALLINT<br>MEDIUMINT<br>BIGINT<br>UNSIGNED BIG INT<br>INT2<br>INT8</td>            <td style="text-align:center">INTEGER</td>        </tr>        <tr>            <td style="text-align:center">CHARACTER(20)<br>VARCHAR(255)<br>VARYING CHARACTER(255)<br>NCHAR(55)<br>NATIVE CHARACTER(70)<br>NVARCHAR(100)<br>TEXT<br>CLOB</td>            <td style="text-align:center">TEXT</td>        </tr>        <tr>            <td style="text-align:center">BLOB<br>no datatype specified</td>            <td style="text-align:center">NONE</td>        </tr>        <tr>            <td style="text-align:center">REAL<br>DOUBLE<br>DOUBLE PRECISION<br>FLOAT</td>            <td style="text-align:center">REAL</td>        </tr>        <tr>            <td style="text-align:center">NUMERIC<br>DECIMAL(10,5)<br>BOOLEAN<br>DATE<br>DATETIME</td>            <td style="text-align:center">NUMERIC</td>        </tr>    </tbody></table><p>可以看到也是5个类型。不过<code>Type Affinity</code>并不是必须的，最终的类型<br>另外还有两个类型，布尔型和日期/时间类型，前者会被转换为整型的0(FALSE)和1(TRUE)，后者则会被存储为TEXT、REAL或INTEGER。</p><hr><p>好，到这时，就可以到SQLiteStudio中实践一下了。打开软件，找到”Database-&gt;Add a database”，类型选SQLite3就可以，点绿加号选择文件的保存位置，下边的Name其实是在左侧列表中显示的名字，点确定就可以了。<br>一开始还没建表，所以一片灰什么都没……右击”Tables”选择”Create a table”，打开列表设计页，输入”Table name”之后就可以建表了。双击空白处打开字段编辑框，然后按一般套路去搞就行了。这里我需要提交的表单信息很少，所以除了必要的姓名手机号以外，就多建了个id(多说一句，勾上主键点开配置，勾上”Autoincrement”就是自增)。</p><p>插一句，在折腾的过程中又发现了一个GUI程序DB Browser for SQLite，体验比SQLiteStudio好太多：<br><img src="/images/1005972504-5971f5422fd39.png" alt="DB Browser for SQLite"><br>DB Browser很符合我心目中对数据库浏览器的要求：足够简单(就SQLite而言)、界面友好(全中文覆盖完全)、功能实际(有个细节，在新建字段时，默认只提供<code>INTEGER</code>、<code>TEXT</code>、<code>NONE</code>、<code>REAL</code>、<code>NUMERIC</code>这5种，起码在我看来这降低了复杂度，且符合原有设计)，所以建议换这个。</p><hr><p>表设计的差不多，就可以开搞PHP这边了。<br>数据库操作选择了用PDO来实现，因为之前写过……PDO的好处就是对于实现了驱动的数据库，换个DSN就行了，后边再用SQL指令、事务操作什么的都是通用的。所以有：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'content-type: text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: no-cache'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token string">'sqlite:../data/test.db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向数据库文件</span>    <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置操作编码</span>    <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遇错误抛出异常</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PDOExceiption</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'ERROR!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当然这只是完成了最基本的功能：连接，如果没有错误发生的话，它连报错也不会。所以在后边，需要加一点SQL语句进去，鉴于我的需求主要是写入数据，所以我们需要在这里加上预处理语句。什么是预处理语句呢？可以把它看作是想要运行的SQL的一种编译过的模板，它可以使用变量参数进行定制。<br>那么接下来：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'content-type: text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: no-cache'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token string">'sqlite:../data/test.db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向数据库文件</span>    <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置操作编码</span>    <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遇错误抛出异常</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">'INSERT INTO user (user, phone, city) VALUES (:user, :phone, :city)'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里用的是冒号式的具名占位符，也可以用`?`来做匿名占位符，下边绑定时改用数字序号就行</span>    <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token string">':user'</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//绑定占位符对应的值</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token string">':phone'</span><span class="token punctuation">,</span> <span class="token variable">$phone</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token string">':city'</span><span class="token punctuation">,</span> <span class="token variable">$city</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PDOExceiption</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'ERROR!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>到这里，前边的代码基本能跑了。但是可以留意到错误处理这块还是很简陋，没有error信息也没有留下log，那么把这里完善一下：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'content-type: text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Cache-Control: no-cache'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token string">'sqlite:../data/test.db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向数据库文件</span>    <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置操作编码</span>    <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遇错误抛出异常</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">'INSERT INTO user (user, phone, city) VALUES (:user, :phone, :city)'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里用的是冒号式的具名占位符，也可以用`?`来做匿名占位符，下边绑定时改用数字序号就行</span>    <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token string">':user'</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//绑定占位符对应的值</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token string">':phone'</span><span class="token punctuation">,</span> <span class="token variable">$phone</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token string">':city'</span><span class="token punctuation">,</span> <span class="token variable">$city</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PDOExceiption</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$now</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'Y-m-d H:m:s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'[time]['</span> <span class="token punctuation">.</span> <span class="token variable">$now</span> <span class="token punctuation">.</span> <span class="token string">'][msg]['</span> <span class="token punctuation">.</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">']'</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token function">error_log</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'../log/error.log'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>那么到了这里，这段代码基本就算能开跑了。当然还是建议根据需要加上<code>return</code>语句，这里不多赘述。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天在折腾一个小的推广页面，里边有个需求是提交表单和数据汇总，估了下压力应该不大，懒得再折腾MySQL服务了，就想试试SQLite。我后端主要是用PHP打配合，查了下文档，SQLite在PHP上主要有纯原生的SQLite扩展和数据库抽象层PDO(PHP数据对象)两种调用方式。由于之前写MySQL的时候接触过PDO，所以这次也优先选择了这种方式
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="后端" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="https://marsgt.github.io/tags/PHP/"/>
    
      <category term="SQLite" scheme="https://marsgt.github.io/tags/SQLite/"/>
    
      <category term="数据库" scheme="https://marsgt.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>在Hexo nexT主题上添加多个字体</title>
    <link href="https://marsgt.github.io/2018/12/12/%E5%9C%A8Hexo-nexT%E4%B8%BB%E9%A2%98%E4%B8%8A%E6%B7%BB%E5%8A%A0%E5%A4%9A%E4%B8%AA%E5%AD%97%E4%BD%93/"/>
    <id>https://marsgt.github.io/2018/12/12/在Hexo-nexT主题上添加多个字体/</id>
    <published>2018-12-12T13:15:56.000Z</published>
    <updated>2018-12-12T14:09:42.728Z</updated>
    
    <content type="html"><![CDATA[<p>折腾Hexo的第一篇，先聊聊多字体设置。    <a id="more"></a></p><p>官方自带的主题市场溜达了一圈，也没看到什么感兴趣的，后来发现怎么好几个博客都在用nexT？那就装上试试吧。从&thinsp;Github&thinsp;上下载、安装、改设置一气呵成，清掉之前的重新生成，Bingo！<br>翻了翻这主题真的不错，要用的一些插件基本集成全了，还自带一个<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">网站</a>用来&thinsp;Step by Step&thinsp;教怎么用，真的贴心到家了~<br>使用中发现了一个痛点，就是不知道默认样式怎么设置多个字体，文档里提到的<code>next\_config.yml</code>里的<code>font</code>设置包括给到的&thinsp;Demo&thinsp;只适合单个字体，但我自己习惯上需要设置多个字体回退（包括现在在码字的&thinsp;VSCode&thinsp;都是）的，So，</p><p><strong>怎么办？</strong></p><p>上网搜了下，资料不是很多，只有一篇&thinsp;2017&thinsp;年的<a href="https://www.chenxuefei.com/2017/hexo-next-font-family/" target="_blank" rel="noopener">文章</a>提到要改<code>next\source\css\_variables\base.styl</code>文件，我一看，我去这&thinsp;Stylus&thinsp;啊，当初觉得门槛高就没碰过，没想到在这又……好吧硬着头皮去找文档。除了<a href="http://stylus-lang.com/" target="_blank" rel="noopener">官方文档</a>以外，能用的只有张鑫旭维护的<a href="https://www.zhangxinxu.com/jq/stylus/" target="_blank" rel="noopener">Stylus中文文档</a>还能看，简单瞅了几眼，然后对着代码开撸~<br>按照之前那篇文章里所写，先在<code>family</code>里设置长字符串，然后回到&thinsp;styl&thinsp;文件的函数里去除引号，但找了好几圈，也没发现stylus哪里提供了去除掉引号的方法，或者说，就没找到完整的字符串类型操作函数……于是放弃。<br>由于之前折腾&thinsp;Docker&thinsp;的时候，学了点&thinsp;Yaml&thinsp;语法，这时突然想，把配置直接写成数组形式行不行？于是我写成了这样：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">family</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token punctuation">-</span>apple<span class="token punctuation">-</span>system    <span class="token punctuation">-</span> BlinkMacSystemFont    <span class="token punctuation">-</span> Segoe UI Emoji    <span class="token punctuation">-</span> Helvetica Neue    <span class="token punctuation">-</span> Helvetica    <span class="token punctuation">-</span> Nimbus Sans L    <span class="token punctuation">-</span> Arial    <span class="token punctuation">-</span> Liberation Sans    <span class="token punctuation">-</span> Hiragino Sans GB    <span class="token punctuation">-</span> Source Han Sans CN Normal    <span class="token punctuation">-</span> Microsoft YaHei    <span class="token punctuation">-</span> 微软雅黑    <span class="token punctuation">-</span> Wenquanyi Micro Hei    <span class="token punctuation">-</span> WenQuanYi Zen Hei    <span class="token punctuation">-</span> ST Heiti    <span class="token punctuation">-</span> SimHei    <span class="token punctuation">-</span> WenQuanYi Zen Hei Sharp  <span class="token key atrule">size</span><span class="token punctuation">:</span></code></pre><p>再在&thinsp;styl&thinsp;文件里直接放变量，然后拼接尾部的<code>, sans-serif</code>，好的<code>hexo g</code>生成！然后惊喜的发现数组内容是以空格连接直接输出的，这……好吧，我改用自带的<code>join()</code>函数拼接下试试~但是试了几次，最后输出的内容都会被一对引号包起来，甚至连一开始的空格都没了，这……<br>一筹莫展之际，发现<code>base.styl</code>下边还有个<code>custom.styl</code>，咦？试着直接把需要的样式直接写进去：</p><pre class=" language-stylus"><code class="language-stylus"><span class="token variable-declaration"><span class="token variable">$font-family-base</span>      <span class="token operator">=</span> -apple-system<span class="token punctuation">,</span> BlinkMacSystemFont<span class="token punctuation">,</span> <span class="token string">"Segoe UI Emoji"</span><span class="token punctuation">,</span> <span class="token string">"Helvetica Neue"</span><span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> <span class="token string">"Nimbus Sans L"</span><span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> <span class="token string">"Liberation Sans"</span><span class="token punctuation">,</span> <span class="token string">"Hiragino Sans GB"</span><span class="token punctuation">,</span> <span class="token string">"Source Han Sans CN Normal"</span><span class="token punctuation">,</span> <span class="token string">"Microsoft YaHei"</span><span class="token punctuation">,</span> <span class="token string">"微软雅黑"</span><span class="token punctuation">,</span> <span class="token string">"Wenquanyi Micro Hei"</span><span class="token punctuation">,</span> <span class="token string">"WenQuanYi Zen Hei"</span><span class="token punctuation">,</span> <span class="token string">"ST Heiti"</span><span class="token punctuation">,</span> SimHei<span class="token punctuation">,</span> <span class="token string">"WenQuanYi Zen Hei Sharp"</span><span class="token punctuation">,</span> sans-serif</span><span class="token variable-declaration"><span class="token variable">$font-family-monospace</span> <span class="token operator">=</span> <span class="token string">"Fira Code"</span><span class="token punctuation">,</span> <span class="token string">"更纱黑体 UI SC"</span><span class="token punctuation">,</span> consolas<span class="token punctuation">,</span> Menlo<span class="token punctuation">,</span> <span class="token string">"Segoe UI Emoji"</span><span class="token punctuation">,</span> monospace</span></code></pre><p>然后<code>hexo g</code>生成……居然搞定了！哈哈😄~生成的内容就是我想要的！</p><p>所以方法就是这样，不要管<code>_config.yml</code>和<code>base.styl</code>里的东西，直接在<code>custom.styl</code>里重写相应的变量就行了~</p><p>如果本文对你有帮助，欢迎在下方打赏我哦！谢谢😁~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾Hexo的第一篇，先聊聊多字体设置。
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Hexo" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/Hexo/"/>
    
    
      <category term="随手记" scheme="https://marsgt.github.io/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
      <category term="Hexo" scheme="https://marsgt.github.io/tags/Hexo/"/>
    
      <category term="Yaml" scheme="https://marsgt.github.io/tags/Yaml/"/>
    
      <category term="Stylus" scheme="https://marsgt.github.io/tags/Stylus/"/>
    
  </entry>
  
  <entry>
    <title>Hello, World.</title>
    <link href="https://marsgt.github.io/2018/11/06/Hello-World/"/>
    <id>https://marsgt.github.io/2018/11/06/Hello-World/</id>
    <published>2018-11-06T04:13:12.000Z</published>
    <updated>2018-12-30T01:54:51.621Z</updated>
    
    <content type="html"><![CDATA[<p>Hello world, Hexo.</p><p>此站点正式启用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hello world, Hexo.&lt;/p&gt;
&lt;p&gt;此站点正式启用。&lt;/p&gt;
      
    
    </summary>
    
      <category term="HelloWorld" scheme="https://marsgt.github.io/categories/HelloWorld/"/>
    
    
      <category term="随手记" scheme="https://marsgt.github.io/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
      <category term="Hexo" scheme="https://marsgt.github.io/tags/Hexo/"/>
    
      <category term="HelloWorld" scheme="https://marsgt.github.io/tags/HelloWorld/"/>
    
  </entry>
  
  <entry>
    <title>关于iOS 11.x微信连wifi流程中，在Portal页无法拉起微信问题的简单记录</title>
    <link href="https://marsgt.github.io/2018/08/31/%E5%85%B3%E4%BA%8EiOS-11-x%E5%BE%AE%E4%BF%A1%E8%BF%9Ewifi%E6%B5%81%E7%A8%8B%E4%B8%AD%EF%BC%8C%E5%9C%A8Portal%E9%A1%B5%E6%97%A0%E6%B3%95%E6%8B%89%E8%B5%B7%E5%BE%AE%E4%BF%A1%E9%97%AE%E9%A2%98%E7%9A%84%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/"/>
    <id>https://marsgt.github.io/2018/08/31/关于iOS-11-x微信连wifi流程中，在Portal页无法拉起微信问题的简单记录/</id>
    <published>2018-08-31T08:01:13.000Z</published>
    <updated>2018-12-30T01:47:29.831Z</updated>
    
    <content type="html"><![CDATA[<p>标题挺长，踩过坑的应该看的明白。不过限于目前所做产品流程的限制，我并没有解决掉这个问题，只是简单说一下相应的思路。    <a id="more"></a></p><ol>    <li>iOS的系统浏览器是Safari，用于Portal认证的则是CNA（Captive Network Assistant），二者的区别在于前者可以打开wachat:这种私有协议头网址，后者无法打开并且限制很多，比如无法使用<code>alert()</code>、无法正常使用<code>window.open()</code>（只能做跳转）等等。</li>    <li>问题的症结在于在新版的CNA中是不认<code>wechat:</code>这样的私有协议头的，所以自然也就拉不起来微信。解决时需要引导用户点击a标签<code>&lt;a target=&quot;_system&quot;&gt;&lt;/a&gt;</code>触发Safari，然后再在Safari拉起微信就行了。</li>    <li>我目前的portal触发逻辑是，客户端连到wifi上回触发landing，首先返回码设定为401用于触发客户端的portal页面，同时判断客户端UA，如果是部分安卓或iOS就渲染landing实体页（landing.ejs），页面的title和body均为“Success”以作为iOS欺骗（并且会加快从连接到弹出portal的响应时间）；js部分，ios是直接打开认证URL，针对部分安卓则是加了判断<code>document.visibilityState == &#39;visible&#39;</code>时触发跳转的事件，用来解决不弹portal的问题。但由于点击按钮之后就直接进到js拉微信认证的流程了（少一步引导拉起微信），所以其实需要部分变更产品流程才行（这个版本暂时没戏）。</li>    <li>参考链接：<ul>            <li><a href="https://stackoverflow.com/questions/29744245/ios-open-a-welcome-page-in-safari-not-cna-post-authentication" target="_blank" rel="noopener">iOS: Open a Welcome Page in Safari, not CNA</a></li>            <li><a href="http://www.xiegaosheng.com/post/view?id=99" target="_blank" rel="noopener">微信连WI-Fi解决ios无法呼出微信</a></li>        </ul>    </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;标题挺长，踩过坑的应该看的明白。不过限于目前所做产品流程的限制，我并没有解决掉这个问题，只是简单说一下相应的思路。
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="移动端" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="随手记" scheme="https://marsgt.github.io/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
      <category term="微信" scheme="https://marsgt.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="WiFi" scheme="https://marsgt.github.io/tags/WiFi/"/>
    
      <category term="iOS" scheme="https://marsgt.github.io/tags/iOS/"/>
    
      <category term="Portal" scheme="https://marsgt.github.io/tags/Portal/"/>
    
  </entry>
  
  <entry>
    <title>win10+vscode部署java开发环境</title>
    <link href="https://marsgt.github.io/2018/05/15/win10-vscode%E9%83%A8%E7%BD%B2java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://marsgt.github.io/2018/05/15/win10-vscode部署java开发环境/</id>
    <published>2018-05-15T08:36:44.000Z</published>
    <updated>2018-12-30T01:46:42.583Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学Java，嫌IDE太重，就自己摸索了一下用VScode部署Java开发环境的方法，比较适合轻度入门级、以及对比较熟VScode不想换编辑器的搞法。    <a id="more"></a></p><ol>    <li><strong>部署JDK</strong><br>其实之前在大概1.5的时候就看过一点Java的东西，也装过JDK还有JRE，也装过Eclipse，但是前边那俩太占系统资源了，后边的又太丑，没多久就让我全给卸了。这回一开始装的时候，其实我也试过装JDK，但是也还是和之前一个德行，直到我看到了<a href="http://openjdk.java.net/" target="_blank" rel="noopener">OpenJDK</a>……卧槽要的就是这个！直接到它的下载里把东西拖回来解压，然后到开始菜单打开“设置”（齿轮图标），直接搜索“高级”，点击“查看高级系统设置”打开“系统属性”窗口，再点“环境变量…”按钮打开“环境变量”，在上边用户变量里加个<code>JAVA_HOME</code>的变量，值就是你JDK解压到的位置（可以直接用浏览目录选择）；再点开“Path”，在下边新增一项<code>%JAVA_HOME%\bin</code>，全部确定退出去就可以了。这时可以用<kbd>Win</kbd>+<kbd>R</kbd>并输入<code>cmd</code>打开命令提示符窗口，输入<code>java -version</code>能看到OpenJDK版本信息的话，就说明搞定了。</li>    <li><strong>部署Maven</strong><br>Maven其实也是类似于JDK这种，直接去<a href="https://maven.apache.org/" target="_blank" rel="noopener">官网</a>点Download，直接找到Binary zip archive的Link直接下载就行，也是拖到一个地方解压，然后点开“环境变量”，在用户变量里分别加个<code>M2_HOME</code>，都指向解压目录，然后再到Path里加个<code>%M2_HOME%\bin</code>全部确定就可以了。验证时到cmd里输下<code>mvn -v</code>，同样如果有版本信息那就是成功了。</li>    <li><strong>在VScode里安装相关插件及配置</strong><br>Microsoft有个官方的插件“Java Extension Pack”，点开它的“依赖项”可以看到就是需要装的几个插件，可以直接装这个（会附带把依赖项都装上）或者单装都可以，装好以设置下<code>java.home</code>、<code>maven.executable.path</code>和<code>maven.terminal.useJavaHome</code>基本就能跑了，当然记得把<code>terminal.integrated.shell.windows</code>也要一并设置好。</li>    <li><strong>配置MAVEN国内代理</strong><br>首先打开MAVEN的解压目录，然后找到conf文件夹，把<code>settings.xml</code>文件复制到用户文件夹的<code>.m2</code>文件夹下，然后找到<code>&lt;mirrors&gt;</code>这段，添加：        <pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Maven Repository Switchboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo1.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>repo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Human Readable Name for this Mirror.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo2.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>ibiblio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Human Readable Name for this Mirror.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://mirrors.ibiblio.org/pub/mirrors/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jboss-public-repository-group<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>JBoss Public Repository Group<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repository.jboss.org/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven.net.cn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>oneof the central mirrors in china<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.net.cn/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre> 进去，保存退出。</li>    <li><strong>部署Gradle</strong><br>Gradle是Google家的构建系统工具，一般Android上用的更多些。由于语法是基于Groovy实现的，所以手写时会比XML爽不少。在安装上，Gradle跟其它工具大同小异，都是先去<a href="http://www.gradle.org/downloads" target="_blank" rel="noopener">官网下载</a>，然后解压到一个目录，再在系统里加入<code>GRADLE_HOME</code>变量，并把bin目录加入到Path里即可。<br>Gradle文档可以参考<a href="https://doc.yonyoucloud.com/doc/wiki/project/GradleUserGuide-Wiki/index.html" target="_blank" rel="noopener">Gradle 用户指南官方文档中文版</a>。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学Java，嫌IDE太重，就自己摸索了一下用VScode部署Java开发环境的方法，比较适合轻度入门级、以及对比较熟VScode不想换编辑器的搞法。
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="开发工具" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="编辑器" scheme="https://marsgt.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="VSCode" scheme="https://marsgt.github.io/tags/VSCode/"/>
    
      <category term="JAVA" scheme="https://marsgt.github.io/tags/JAVA/"/>
    
      <category term="Windows10" scheme="https://marsgt.github.io/tags/Windows10/"/>
    
  </entry>
  
  <entry>
    <title>jQTips · 动态添加元素的清爽写法</title>
    <link href="https://marsgt.github.io/2017/08/02/jQTips-%C2%B7-%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0%E7%9A%84%E6%B8%85%E7%88%BD%E5%86%99%E6%B3%95/"/>
    <id>https://marsgt.github.io/2017/08/02/jQTips-·-动态添加元素的清爽写法/</id>
    <published>2017-08-02T10:54:39.000Z</published>
    <updated>2018-12-30T01:46:42.583Z</updated>
    
    <content type="html"><![CDATA[<p>在写动态添加元素时，一般比较常见的写法都是    <a id="more"></a>这个样子的：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> newClass <span class="token operator">=</span> <span class="token string">'newDiv'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newText <span class="token operator">=</span> <span class="token string">'Demo!'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newBody <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;div class="'</span> <span class="token operator">+</span> newClass <span class="token operator">+</span> <span class="token string">'">'</span> <span class="token operator">+</span> newText <span class="token operator">+</span> <span class="token string">'&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newBody<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果还需要事件呢，那么就在前边加个事件委托：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'.newDiv'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Click Me!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但其实呢，这里可以还使用jQuery对象的包装语法，通过查询文档呢我们知道它的语法是<code>jQuery( html, attributes )</code>，在<code>html</code>参数这里，我们可以使用一个（不含任何属性的）单标签，就是类似于<code>&quot;&lt;div /&gt;&quot;</code>、<code>&quot;&lt;div&gt;&quot;</code>以及<code>&quot;&lt;div&gt;&lt;/div&gt;&quot;</code>这几种类型的标签，它和前边一大长串字符串那种的区别在于：前者会用<code>innerHTML</code>实现；而后者则是调用<code>.createElement()</code>实现的。</p><p>看到这里你可能会问，如果前边用了单标签，那里边这堆<code>class</code>啊还有内容啥的该咋办？答案就在第二个参数<code>attributes</code>上。<code>attributes</code>参数是一个对象，里边放的是第一个参数、也就是单标签里的属性，简单来说你可以将它等同于<code>.attr(attributes)</code>来用，并且，它还能综合<code>.val()</code>、<code>.css()</code>、<code>.html()</code>、<code>.text()</code>、<code>.data()</code>、<code>.width()</code>、<code>.height()</code>、<code>.offset()</code>之类的功能，比如第一段代码就可以改写成：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> newClass <span class="token operator">=</span> <span class="token string">'newDiv'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newText <span class="token operator">=</span> <span class="token string">'Demo!'</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;div>'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'class'</span><span class="token punctuation">:</span> newClass<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//和.attr()一样，由于class是保留字所以要强制加引号</span>    text<span class="token punctuation">:</span> newText<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>而绑定事件也可以一并写进去，比如带有简写（即<code>.click()</code>）调用的click就可以这样写：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> newClass <span class="token operator">=</span> <span class="token string">'newDiv'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newText <span class="token operator">=</span> <span class="token string">'Demo!'</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;div>'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'class'</span><span class="token punctuation">:</span> newClass<span class="token punctuation">,</span>    text<span class="token punctuation">:</span> newText<span class="token punctuation">,</span>    click<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Click Me!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当然也可以写成：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> newClass <span class="token operator">=</span> <span class="token string">'newDiv'</span><span class="token punctuation">;</span><span class="token keyword">var</span> newText <span class="token operator">=</span> <span class="token string">'Demo!'</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;div>'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'class'</span><span class="token punctuation">:</span> newClass<span class="token punctuation">,</span>    text<span class="token punctuation">:</span> newText<span class="token punctuation">,</span>    on<span class="token punctuation">:</span> <span class="token punctuation">{</span>        click<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Click Me!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果为一堆变量名命名发愁，也可以完全不用变量，变成：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;div>'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'newDiv'</span><span class="token punctuation">,</span>    text<span class="token punctuation">:</span> <span class="token string">'Demo!'</span><span class="token punctuation">,</span>    click<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Click Me!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>看起来有没有比苦逼的字符串拼接清爽许多呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写动态添加元素时，一般比较常见的写法都是
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="前端" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://marsgt.github.io/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="https://marsgt.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>自己撸个简单的ps切图脚本（已弃坑）</title>
    <link href="https://marsgt.github.io/2017/07/25/%E8%87%AA%E5%B7%B1%E6%92%B8%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84ps%E5%88%87%E5%9B%BE%E8%84%9A%E6%9C%AC%EF%BC%88%E5%B7%B2%E5%BC%83%E5%9D%91%EF%BC%89/"/>
    <id>https://marsgt.github.io/2017/07/25/自己撸个简单的ps切图脚本（已弃坑）/</id>
    <published>2017-07-25T10:31:01.000Z</published>
    <updated>2019-01-23T02:33:28.566Z</updated>
    
    <content type="html"><![CDATA[<p>刚做完的一个H5项目里，为了切图方便，接触了下Photoshop的脚本功能。从找资料、写脚本到实际能用全套跑了一圈下来发现，嗯，果然是挺难用的[\捂脸]。不过虽然缺点满满，但PS这个平台上，可以拿来做自动化切图这种事的选择并不多……所以只好将就将就咯~    <a id="more"></a></p><p>##0.准备篇</p><p>工欲善其事、必先利其器。写ps脚本除了常用的代码编辑器以外，还有个选择，就是Adobe自家的<a href="http://www.adobe.com/devnet/scripting/estk.html" target="_blank" rel="noopener">ExtendScript Toolkit CC</a>。这里解释一下，“ExtendScript”也就是本文所讨论的ps脚本，并不只有ps可以用，AE、AI都是可以用的，不过需要调用各自不同的API。ExtendScript Toolkit的界面和操作啥的都挺路人的，只不过它有个别的代码编辑器都没有的功能，就是可以直接连接上ps，并看到ps的内部对象，另外它也能一键调用ps来执行脚本，所以我选择先用代码编辑器写脚本，然后用它来执行。</p><p>刚装好的ExtendScript Toolkit界面大概是这样的：</p><p><img src="/images/1005972504-5971f5422fd37.png" alt="clipboard.png"></p><p>标签页底下前边带个绿色双锁链图标的是链接选框，作用是决定当前文档需要和哪个程序（PS、AI、AE等）链接，右边从上到下分别是console控制台、脚本库和内部对象浏览器。</p><p>看起来好像挺高大上的样子，对吧？燃鹅，万幸中的不幸是，我发现它并不能识别出我的PS……所以并没有什么卵用……</p><p>不过装好这个工具以后，在它安装目录下（我系统是Win10，安装目录是<code>\Program Files (x86)\Adobe\Adobe ExtendScript Toolkit CC\</code>）会有个SDK文件夹，里边有个叫<code>JavaScript Tools Guide CC</code>的PDF是可以参考的（里边是一些Ps、AI、AE几个软件共用的接口，比如File、Folder啥的）；另外在Ps的安装目录下有个<code>\Presets\Scripts</code>文件夹，一些比如“文件”菜单下的“导出”里的一些功能，就是用脚本来实现的。</p><blockquote>    <p>一些Ps脚本的线上参考资料：</p>    <ol>        <li><a href="http://www.adobe.com/devnet/photoshop/scripting.html" target="_blank" rel="noopener">Adobe Photoshop Scripting</a></li>        <li><a href="http://wwwimages.adobe.com/content/dam/Adobe/en/devnet/photoshop/pdfs/photoshop-cc-scripting-guide-2015.pdf" target="_blank" rel="noopener">ADOBE PHOTOSHOP CC 2015 SCRIPTING GUIDE</a></li>        <li><a href="http://wwwimages.adobe.com/content/dam/Adobe/en/devnet/photoshop/pdfs/photoshop-cc-javascript-ref-2015.pdf" target="_blank" rel="noopener">ADOBE PHOTOSHOP CC 2015 JAVASCRIPT SCRIPTING REFERENCE</a></li>        <li><a href="https://github.com/ExtendScript/wiki/wiki" target="_blank" rel="noopener">ExtendScript Wiki</a></li>        <li><a href="http://nullice.com/archives/1790" target="_blank" rel="noopener">《PHOTOSHOP CC 2015 JAVASCRIPT SCRIPTING REFERENCE》常用部分汉化版</a></li>        <li><a href="http://nullice.com/archives/1795" target="_blank" rel="noopener">PhotoShop ExtendScript 常数表</a></li>        <li><a href="http://www.coolketang.com/psscript/menu1lesson1.php" target="_blank" rel="noopener">初识Ps脚本</a></li>    </ol></blockquote><p>【弃坑……】</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚做完的一个H5项目里，为了切图方便，接触了下Photoshop的脚本功能。从找资料、写脚本到实际能用全套跑了一圈下来发现，嗯，果然是挺难用的[\捂脸]。不过虽然缺点满满，但PS这个平台上，可以拿来做自动化切图这种事的选择并不多……所以只好将就将就咯~
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Photoshop" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/Photoshop/"/>
    
    
      <category term="插件" scheme="https://marsgt.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="Photoshop" scheme="https://marsgt.github.io/tags/Photoshop/"/>
    
  </entry>
  
  <entry>
    <title>神经病啊！--微信同层播放器接(踩)入(坑)总结</title>
    <link href="https://marsgt.github.io/2017/06/14/%E7%A5%9E%E7%BB%8F%E7%97%85%E5%95%8A%EF%BC%81-%E5%BE%AE%E4%BF%A1%E5%90%8C%E5%B1%82%E6%92%AD%E6%94%BE%E5%99%A8%E6%8E%A5-%E8%B8%A9-%E5%85%A5-%E5%9D%91-%E6%80%BB%E7%BB%93/"/>
    <id>https://marsgt.github.io/2017/06/14/神经病啊！-微信同层播放器接-踩-入-坑-总结/</id>
    <published>2017-06-14T09:48:12.000Z</published>
    <updated>2019-01-23T02:33:06.219Z</updated>
    
    <content type="html"><![CDATA[<p>估计踩过微信视频这个坑的，内心都想说上一句：</p><blockquote>    <p>“神经病啊！”</p></blockquote><p>而微信也终于出了个《H5同层播放器接入规范》，算是正常点了……    <a id="more"></a>好了闲话不说，下边进入正题：</p><hr><h3 id="1-lt-video-gt-标签里的内联播放相关属性"><a href="#1-lt-video-gt-标签里的内联播放相关属性" class="headerlink" title="1. &lt;video&gt;标签里的内联播放相关属性"></a>1. <code>&lt;video&gt;</code>标签里的内联播放相关属性</h3><p>微信在video标签上新增了一些x5的私有属性，分别是：</p><ol>    <li><code>x5-video-player-type</code><br>启用同层播放。取值固定为<code>&#39;h5&#39;</code>。</li>    <li><code>x5-video-player-fullscreen</code><br>是否全屏。取值为<code>&#39;true&#39;</code>或<code>&#39;false&#39;</code>。</li>    <li><code>x5-video-orientation</code><br>视频方向。取值分别为<code>&#39;landscape&#39;</code>、<code>&#39;portrait&#39;</code>或者<code>&#39;landscape|portrait&#39;</code>，分别对应横屏、竖屏及自动旋转（这个应该用的少）。</li></ol><p>不过有一点需要注意的是，这些都是x5的私有属性，仅适用于Android平台。而跟iOS平台相关的，则是这几个属性：</p><ol>    <li><code>airplay</code></li>    <li><code>x-webkit-airplay</code></li>    <li><code>playsinline</code></li>    <li><code>webkit-playsinline</code></li></ol><p>其中最后两个是iOS平台下的内联播放属性，都是布尔属性，不需要赋值（存在即是true）；前两个是iOS平台下airplay的相关属性（说实话我现在也没搞明白为什么网页需要airplay属性），取值为<code>&#39;allow&#39;</code>或<code>&#39;deny&#39;</code>，通常保险起见用<code>&#39;allow&#39;</code>就可以。</p><h3 id="2-CSS的属性选择及取值"><a href="#2-CSS的属性选择及取值" class="headerlink" title="2. CSS的属性选择及取值"></a>2. CSS的属性选择及取值</h3><p>微信在同层接入规范中提到了<code>object-position</code>这个属性，用于设置视频出现的位置。实际在尝试的过程中，搭配<code>object-fit</code>属性同时使用的效果会比较好。但这两个属性并不是x5私有属性，而是原生的，所以它们同时适用于Android和iOS两个平台。</p><p><code>object-position</code>和<code>object-fit</code>这两个元素主要的作用是为“可替换元素”设置位置和大小。这里的“可替换元素”，指的是内容不受CSS显式控制的元素，比如比较典型的就是<code>&lt;img&gt;</code>、<code>&lt;object&gt;</code>、<code>&lt;video&gt;</code>和表单元素等。</p><p>说回视频播放。微信官方的同层接入规范中推荐的做法，是用js动态计算需要的像素值，然后给<code>object-position</code>属性赋值。而我自己尝试了一圈下来，发现<code>object-position</code>这个属性本身支持百分比取值，通常视频默认的值是<code>&#39;50% 50%&#39;</code>，也就是居中；全屏视频一般情况下需要贴底放，所以要把取值改成<code>&#39;0 100%&#39;</code>。</p><p>另一个属性<code>object-fit</code>，有点类似<code>background-size</code>属性，用来设置视频在容器内的填充方式，平时用只需要取值<code>&#39;contain&#39;</code>（保持宽高比填满容器）就可以了。不过这里需要留意的是，全屏下，由于视频一般都不会正好填满屏幕（宽高比差异以及输出分辨率没算顶部标题栏），会在顶部留下一条空隙。这条空隙通常是默认黑色的，如果需要更改颜色，首先要加上个<code>&#39;display:block;&#39;</code>（因为video默认是inline的），然后直接改<code>background-color</code>就OK~</p><h3 id="3-视频封面"><a href="#3-视频封面" class="headerlink" title="3. 视频封面"></a>3. 视频封面</h3><p><code>&lt;video&gt;</code>标签里有一个与视频封面相关的属性<code>poster</code>，但是在使用中发现性能存在一些问题，在Android端打开视频时（加载），会有跳动的感觉，但是如果去掉，在视频加载时（<code>preload</code>取值<code>&#39;auto&#39;</code>，且未用预加载）则会显示空白页面。目前换用了背景图片的方式，但由于视频全屏播放时顶部会有空隙，所以额外加了个<code>background-position: bottom;</code>以及<code>background-size: contain;</code>（取值和视频保持一致），这样设置好的背景在播放视频时就不会漏边了。</p><h3 id="4-设置视频视口大小"><a href="#4-设置视频视口大小" class="headerlink" title="4. 设置视频视口大小"></a>4. 设置视频视口大小</h3><p>同层接入规范里推荐在resize事件回调里设置视频视口大小，我习惯直接设置<code>&lt;video&gt;</code>标签的<code>width</code>和<code>height</code>，所以在resize回调里加入：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'video'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">'width'</span><span class="token punctuation">:</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">,</span>        <span class="token string">'height'</span><span class="token punctuation">:</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">+</span> <span class="token string">'px'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>就可以了。</p><h3 id="5-UA特性探测"><a href="#5-UA特性探测" class="headerlink" title="5. UA特性探测"></a>5. UA特性探测</h3><p>同层接入规范里给的，判断是否是同层播放器方法：</p><ol>    <li>在微信等TBS里通过UA判断X5内核版本来区分,当版版本号&gt;036849表示支持<br>UA示例:<br>Mozilla/5.0 (Linux; Android 4.4.4; OPPO R7 Build/KTU84P) AppleWebKit/537.36<br>(KHTML, like Gecko) Version/4.0 Chrome/37.0.0.0 Mobile MQQBrowser/6.8<br>TBS/036849 Safari/537.36 MicroMessenger/6.3.27.861 NetType/WIFI<br>Language/zh_CN</li>    <li>在QQ浏览器Android版本中,当浏览器版本&gt;=7.1时开始支持<br>UA示例：User­Agent: Mozilla/5.0 (Linux; U; Android 4.4.4; zh­cn; OPPO R7<br>Build/KTU84P) AppleWebKit/537.36 (KHTML, like Gecko)Version/4.0<br>Chrome/37.0.0.0 MQQBrowser/7.1 Mobile Safari/537.36</li></ol><hr><p>参考资料：</p><ol>    <li><a href="https://x5.tencent.com/tbs/guide/video.html" target="_blank" rel="noopener">微信 · H5同层播放器接入规范</a></li>    <li><a href="https://aotu.io/notes/2017/01/11/mobile-video/" target="_blank" rel="noopener">京东 · 视频H5のVideo标签在微信里的坑和技巧</a></li>    <li><a href="http://itakeo.com/blog/2016/07/07/videoinline/" target="_blank" rel="noopener">关于如何在微信里面让video不全屏播放</a></li>    <li><a href="http://www.cnblogs.com/jinjinyike/p/6519525.html" target="_blank" rel="noopener">H5微信播放全屏问题</a></li>    <li><a href="http://blog.poetries.top/2016/12/30/video-audio/" target="_blank" rel="noopener">HTML5中的视频音频使用详解</a></li>    <li><a href="http://www.zhangxinxu.com/wordpress/2015/03/css3-object-position-object-fit/" target="_blank" rel="noopener">张鑫旭 · 半深入理解CSS3 object-position/object-fit属性</a></li>    <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-fit" target="_blank" rel="noopener">MDN · object-fit</a></li>    <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-position" target="_blank" rel="noopener">MDN · object-position</a></li>    <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/Events/Media_events" target="_blank" rel="noopener">MDN · 媒体相关事件</a></li>    <li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element" target="_blank" rel="noopener">MDN · 可替换元素</a></li>    <li><a href="https://developer.apple.com/reference/webkitjs/htmlvideoelement" target="_blank" rel="noopener">Apple Developer · HTMLVideo​Element</a></li>    <li><a href="https://developer.apple.com/reference/webkitjs/htmlmediaelement" target="_blank" rel="noopener">Apple Developer · HTMLMedia​Element</a></li>    <li><a href="https://developer.apple.com/reference/webkitjs/htmlvideoelement/2528111-playsinline" target="_blank" rel="noopener">Apple Developer · plays​Inline</a></li>    <li><a href="https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/AirPlayGuide/OptingInorOutofAirPlay/OptingInorOutofAirPlay.html" target="_blank" rel="noopener">Apple Developer · Opting Into or Out of AirPlay</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;估计踩过微信视频这个坑的，内心都想说上一句：&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;“神经病啊！”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而微信也终于出了个《H5同层播放器接入规范》，算是正常点了……
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="前端" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://marsgt.github.io/tags/JavaScript/"/>
    
      <category term="微信" scheme="https://marsgt.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="视频" scheme="https://marsgt.github.io/tags/%E8%A7%86%E9%A2%91/"/>
    
      <category term="HTML" scheme="https://marsgt.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>随手记 - 疯狂触发滚轮事件的Mac触控板</title>
    <link href="https://marsgt.github.io/2017/02/07/%E9%9A%8F%E6%89%8B%E8%AE%B0-%E7%96%AF%E7%8B%82%E8%A7%A6%E5%8F%91%E6%BB%9A%E8%BD%AE%E4%BA%8B%E4%BB%B6%E7%9A%84Mac%E8%A7%A6%E6%8E%A7%E6%9D%BF/"/>
    <id>https://marsgt.github.io/2017/02/07/随手记-疯狂触发滚轮事件的Mac触控板/</id>
    <published>2017-02-07T14:54:49.000Z</published>
    <updated>2018-12-30T01:49:03.398Z</updated>
    
    <content type="html"><![CDATA[<p>头几天官网刚上线，就接到投诉说有问题。过去一看，我靠什么鬼？！Mac下用触控板一滑到底，——首页上用iscroll写的翻页效果直接全军覆没。    <a id="more"></a></p><p>这个bug来的莫名其妙，问了一圈人也没什么思路，后来自己上网搜，在一个页面上找到一段关于Mac的触控板的手势滑动会疯狂触发滚轮事件的记录，但是轮到具体的解决方案就语焉不详了。没辙，靠天没用，还是靠自己吧~</p><p>这里先简单介绍下。出问题的首页用的是iscroll插件，用<code>snap</code>属性做的整屏翻页的效果，翻页用鼠标滚轮驱动，这块用的是MDN上的一个滚轮事件的兼容代码，回调使用iscroll的接口完成向上/向下翻页的效果。</p><p>回到这个问题上。一开始我想用事件防抖解决，于是用<code>setTimeout()</code>自己写了个：触发事件后先进入延时，延时后执行函数；如果在延时内仍有事件触发，则取消原有的延时重新计时。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 打底用的zepto.js，addWheelListener是滚轮事件的兼容插件，下同~</span><span class="token keyword">var</span> wheelTimer <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">var</span> wheelSlide <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>deltaY <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wheelTimer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            iScroll<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>deltaY <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> iScroll<span class="token punctuation">.</span>currentPage<span class="token punctuation">.</span>pageY <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wheelTimer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            iScroll<span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">addWheelListener</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> wheelSlide<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我本意是用延时抵消掉重复触发的滚轮事件，最后合成一个事件触发，没想到测试之后，Mac上的问题并没有解决。</p><p>于是我想，用事件防抖的思路处理应该还是不对，即便是延迟时间较短，如果事件持续触发的话肯定翻页还是会被无限的延迟阻塞掉，至此我想换用事件节流再试试。在找资料的时候，意外发现了Underscore.js这个工具库，里边不仅有现成的节流和防抖（中文文档里用的是“防反跳”）函数可以用，而且还支持链式调用，并且压缩版本也才十几k，正合我意。</p><p>说干就干，马上用Underscore撸了个事件节流版的：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> wheelSlide <span class="token operator">=</span> <span class="token function">_</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>deltaY <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        iScroll<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>deltaY <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> iScroll<span class="token punctuation">.</span>currentPage<span class="token punctuation">.</span>pageY <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        iScroll<span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">throttle</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里毫秒数用了400，大概相当于一个短动画的执行时间</span><span class="token function">addWheelListener</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> wheelSlide<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>链式写法看上去还挺不错的！进本机浏览器（PC）……嗯？为啥最后会跳一下？赶紧翻文档，又加了个参数上去：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> wheelSlide <span class="token operator">=</span> <span class="token function">_</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>deltaY <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        iScroll<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>deltaY <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> iScroll<span class="token punctuation">.</span>currentPage<span class="token punctuation">.</span>pageY <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        iScroll<span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">throttle</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>trailing<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addWheelListener</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> wheelSlide<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这回PC上倒是正常了，Mac也从一滑到底变成了有“段落感”的跳动，但结果还是不对……<br>一狠心把毫秒数改成了5000，结果呢：还、是、不、对、、、。。。<br>（//陷入循环懵逼状态ing……）<br>痛定思痛，一定是文档看的不够多！于是又啃了一遍Underscore.js的文档（虽然是翻译的，囧……），发现防抖居然有个<code>[immediate]</code>参数，是可以优先执行的！大喜过望~接着撸：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> wheelSlide <span class="token operator">=</span> <span class="token function">_</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>deltaY <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wScroll<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>deltaY <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> wScroll<span class="token punctuation">.</span>currentPage<span class="token punctuation">.</span>pageY <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wScroll<span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 本来想改回400的，有点心虚所以又加了200……</span><span class="token function">addWheelListener</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> wheelSlide<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>居然PC和Mac都能一页页的翻页了有！没！有！不过翻页的动作还有点迟滞，于是果断把毫秒数改小：400、200、100，……Bingo！</p><p>最终代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> wheelSlide <span class="token operator">=</span> <span class="token function">_</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>deltaY <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wScroll<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>deltaY <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> wScroll<span class="token punctuation">.</span>currentPage<span class="token punctuation">.</span>pageY <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wScroll<span class="token punctuation">.</span><span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addWheelListener</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> wheelSlide<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><p>总结：</p><ol>    <li>Mac触控板bug踩坑 +1；</li>    <li>理解了事件节流和事件防抖的概念；</li>    <li>Underscore.js真好用；</li>    <li>感谢git把每次的修改都记了下来。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;头几天官网刚上线，就接到投诉说有问题。过去一看，我靠什么鬼？！Mac下用触控板一滑到底，——首页上用iscroll写的翻页效果直接全军覆没。
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="前端" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="随手记" scheme="https://marsgt.github.io/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://marsgt.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>简单记录个a标签点不上的bug</title>
    <link href="https://marsgt.github.io/2016/12/31/%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95%E4%B8%AAa%E6%A0%87%E7%AD%BE%E7%82%B9%E4%B8%8D%E4%B8%8A%E7%9A%84bug/"/>
    <id>https://marsgt.github.io/2016/12/31/简单记录个a标签点不上的bug/</id>
    <published>2016-12-31T07:47:12.000Z</published>
    <updated>2018-12-30T01:48:22.677Z</updated>
    
    <content type="html"><![CDATA[<p>官网改版时碰到的问题。简单记录下    <a id="more"></a>：</p><p>【 问题 】</p><blockquote>    <p>官网index页面移动端测试时，发现底部页脚的a标签无论如何点不动。</p></blockquote><p>【 Debug 过程 】</p><blockquote>    <p>1、先是在pc端用浏览器模拟手机看了下，问题重现；</p>    <p>2、然后看了下“规则”和“计算后”面板（用的是FireFox，习惯了……分别对应Chrome的styles和computed），a标签本身的样式似乎是没问题的，周围也没啥问题……</p>    <p>3、丢到chrome里，问题依然重现，继续懵逼……</p>    <p>4、无意间关掉了移动端模拟，居然好了卧槽!!!（黑人问号脸.gif）继续懵逼……</p>    <p>5、试着用“选择元素”工具去点选a标签，居然点到了上边一个透明的空标签上（有宽高），试了几次都是如此（嗯？），然后检查发现该标签<code>position: fixed;</code>，移动端页面收缩后挤下来、整好遮挡住了a标签……至此找到原因。</p>    <p>6、因为该标签不需要响应点击事件，所以直接加了句<code>pointer-events:none</code>，问题解决。</p></blockquote><p>【 小结 】</p><blockquote>    <ul>        <li>其实最开始应该先试下z-index的（个人有点排斥这个样式，都是自然写法），失策失策~~</li>        <li>不要随便写fixed的透明标签……血泪教训=_=|||……</li>        <li>无比怀念FireFox的3D模式……然并卵。以后只好用“选择元素”排除类似的bug了。</li>        <li><code>pointer-events:none</code>真的是神器，省了很多js（其实是jq）“事件监听+选择器判断/过滤”的事。</li>    </ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官网改版时碰到的问题。简单记录下
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="前端" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="随手记" scheme="https://marsgt.github.io/tags/%E9%9A%8F%E6%89%8B%E8%AE%B0/"/>
    
      <category term="HTML" scheme="https://marsgt.github.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://marsgt.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>前端图片直传OSS试验</title>
    <link href="https://marsgt.github.io/2016/08/31/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%89%87%E7%9B%B4%E4%BC%A0OSS%E8%AF%95%E9%AA%8C/"/>
    <id>https://marsgt.github.io/2016/08/31/前端图片直传OSS试验/</id>
    <published>2016-08-31T07:38:27.000Z</published>
    <updated>2018-12-30T01:47:10.865Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间参与了一个H5项目，里边有个需求是用户上传图片。当时的方案是前端先调用微信的JSSDK选择图片并上传，然后再从后端下载到服务器上。然而用的时候发现客户端给的图片有大有小，但是由于用了微信的接口，图片在下载之前是没法控制的。后来在想能不能调用HTML5原生的文件上传接口，另外还可以配合阿里云的OSS对图片做进一步处理，所以就有了这篇文章。    <a id="more"></a></p><h2 id="1-HTML5原生上传"><a href="#1-HTML5原生上传" class="headerlink" title="1. HTML5原生上传"></a>1. HTML5原生上传</h2><p>其实之前也有想过用原生的，可手里的项目全是微信平台的H5，原生上传一直被告知有兼容性问题，所以这个方案一直是被搁置的；只是这次觉得用微信接口实在不爽才重新翻出来的，没想到意外发现手里的米4居然可以正常用。。好了闲话不说，上代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img_input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>preview_box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>HTML部分主要就是那个input，至于下边那个div，主要是留着放图片预览用的。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://cdn.bootcss.com/jquery/2.2.4/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#img_input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> file <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取图片资源</span>        <span class="token keyword">var</span> fd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用formdata上传文件</span>        <span class="token comment" spellcheck="true">// 只选择图片文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'image.*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 填入文件</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            url<span class="token punctuation">:</span> <span class="token string">'fileupload.php'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> fd<span class="token punctuation">,</span>            processData<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            contentType<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            type<span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>            success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 成功后显示文件预览</span>                <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 读取文件</span>                <span class="token comment" spellcheck="true">// 渲染文件</span>                reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token string">'&lt;img class="preview" src="'</span> <span class="token operator">+</span> ev<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result <span class="token operator">+</span> <span class="token string">'" alt="preview"/>'</span><span class="token punctuation">;</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#preview_box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>文件填入FormData，然后POST上传，后端（用的PHP）简单写下接收就行。<br>(然后这里顺便想问下如果直接上传blob的话，PHP后端应该怎么写？有大神路过请不吝赐教~小弟这里先谢过了）</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$error</span> <span class="token operator">==</span> <span class="token constant">UPLOAD_ERR_OK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$tmp_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmp_name</span><span class="token punctuation">,</span> <span class="token string">"$name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后处理下权限啥的，就能跑啦。</p><h2 id="2-前端压缩（localResizeIMG）"><a href="#2-前端压缩（localResizeIMG）" class="headerlink" title="2. 前端压缩（localResizeIMG）"></a>2. 前端压缩（localResizeIMG）</h2><p><a href="https://github.com/think2011/localResizeIMG" target="_blank" rel="noopener">localResizeIMG</a> 是个好插件，用法也很简单，把 GitHub 里的 dist 文件夹拖下来改个名（我改了个“localRZ”），然后直接引用 lrz.bundle.js 文件就行了：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://cdn.bootcss.com/jquery/2.2.4/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>localRZ/lrz.bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#img_input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> file <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取图片资源</span>        <span class="token keyword">var</span> filename <span class="token operator">=</span> file<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 只选择图片文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'image.*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// LocalResizeIMG处理：</span>        <span class="token function">lrz</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token punctuation">{</span>                $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    url<span class="token punctuation">:</span> <span class="token string">'fileupload.php'</span><span class="token punctuation">,</span>                    data<span class="token punctuation">:</span> rst<span class="token punctuation">.</span>formData<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// LocalResizeIMG 直接封装好的</span>                    processData<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                    contentType<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                    type<span class="token punctuation">:</span> <span class="token string">'POST'</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> textStatus<span class="token punctuation">,</span> jqXHR<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 图片预览</span>                    <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    img<span class="token punctuation">.</span>src <span class="token operator">=</span> rst<span class="token punctuation">.</span>base64<span class="token punctuation">;</span>                    img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#preview_box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> rst<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 万一出错了，这里可以捕捉到错误信息</span>                <span class="token comment" spellcheck="true">// 而且以上的then都不会执行</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'ERROR:'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">always</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 不管是成功失败，这里都会执行</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>localResizeIMG 的 <a href="https://github.com/think2011/localResizeIMG/wiki" target="_blank" rel="noopener">文档</a> 写的挺清楚的，哪里不明白的话可以过去看看。</p><h2 id="3-美化上传按钮"><a href="#3-美化上传按钮" class="headerlink" title="3. 美化上传按钮"></a>3. 美化上传按钮</h2><p>原生的文件上传控件略丑，所以一般是要美化一下。<br>HTML：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filePicker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img_input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img_input<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上传图片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>preview_box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>放一个 lable 上去，然后隐藏掉原有的 input：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.filePicker</span> </span><span class="token punctuation">{</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#00b7ee</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.filePicker</span> label </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.filePicker</span> input<span class="token attribute">[type="file"]</span> </span><span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>这样看起来就舒服多了。</p><h2 id="4-对接OSS"><a href="#4-对接OSS" class="headerlink" title="4. 对接OSS"></a>4. 对接OSS</h2><p>关于直传，阿里官方给了三种方案：</p><ol>    <li>客户端 JavaScript 签名后直传；</li>    <li>客户端申请服务端签名，然后打包上传；</li>    <li>客户端申请服务端签名，打包上传OSS后回调服务端。</li></ol><p>这里主要用的是第二种。</p><p>根据官方给的案例代码，首先要搞个签名用的PHP：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">gmt_iso8601</span><span class="token punctuation">(</span><span class="token variable">$time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$dtStr</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token variable">$time</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$mydatetime</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token variable">$dtStr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$expiration</span> <span class="token operator">=</span> <span class="token variable">$mydatetime</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">format</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">ISO8601</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pos</span> <span class="token operator">=</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$expiration</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$expiration</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$expiration</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$pos</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$expiration</span><span class="token punctuation">.</span><span class="token string">"Z"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//自行设置AccessKey和相应Bucket的外网域名</span><span class="token variable">$id</span><span class="token operator">=</span> <span class="token string">'xxxxxxxxxxx'</span><span class="token punctuation">;</span><span class="token variable">$key</span><span class="token operator">=</span> <span class="token string">'yyyyyyyyyy'</span><span class="token punctuation">;</span><span class="token variable">$host</span> <span class="token operator">=</span> 'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//zzzzzzz.oss-cn-xxxxxxxxx.aliyuncs.com/';</span><span class="token variable">$now</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置该policy超时时间是10s. 即这个policy过了这个有效时间，将不能访问</span><span class="token variable">$end</span> <span class="token operator">=</span> <span class="token variable">$now</span> <span class="token operator">+</span> <span class="token variable">$expire</span><span class="token punctuation">;</span><span class="token variable">$expiration</span> <span class="token operator">=</span> <span class="token function">gmt_iso8601</span><span class="token punctuation">(</span><span class="token variable">$end</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件大小范围.用户可以自己设置</span><span class="token variable">$condition</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'content-length-range'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">1048576000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置用户上传指定的前缀</span><span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token string">'test/'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户上传数据的位置匹配,这一步不是必须项,只是为了安全起见,防止用户通过policy上传到别人的目录</span><span class="token variable">$start</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'starts-with'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'$key'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置bucket</span><span class="token variable">$bucket</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'eq'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'$bucket'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'gmei'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$conditions</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$bucket</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$condition</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$start</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'expiration'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$expiration</span><span class="token punctuation">,</span><span class="token string">'conditions'</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$conditions</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//echo json_encode($arr);</span><span class="token comment" spellcheck="true">//return;</span><span class="token variable">$policy</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$base64_policy</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$policy</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$signature</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">hash_hmac</span><span class="token punctuation">(</span><span class="token string">'sha1'</span><span class="token punctuation">,</span> <span class="token variable">$base64_policy</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'accessid'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$id</span><span class="token punctuation">,</span>    <span class="token string">'host'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$host</span><span class="token punctuation">,</span>    <span class="token string">'policy'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$base64_policy</span><span class="token punctuation">,</span>    <span class="token string">'signature'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$signature</span><span class="token punctuation">,</span>    <span class="token string">'expire'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$end</span><span class="token punctuation">,</span>    <span class="token string">'dir'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$dir</span><span class="token punctuation">.</span><span class="token string">'${filename}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>里边的东西填一下，然后保存在同目录下就行。然后改下HTML：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://cdn.bootcss.com/jquery/2.2.4/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>localRZ/lrz.bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#img_input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> file <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取图片资源</span>        <span class="token keyword">var</span> filename <span class="token operator">=</span> file<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 只选择图片文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'image.*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// LocalResizeIMG写法：</span>        <span class="token function">lrz</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> fieldName<span class="token punctuation">:</span> <span class="token string">'osstest'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// OSS要求把上传文件放到最后一项，但是用LocalResizeIMG输出的FormData，就只能放在</span>                <span class="token comment" spellcheck="true">// 第一项，所以这里要自己new个出来</span>                <span class="token keyword">var</span> ossData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 先请求授权，然后回调</span>                $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">'ossget.php'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>json<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//签名用的PHP</span>                    <span class="token comment" spellcheck="true">// 添加签名信息</span>                    ossData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'OSSAccessKeyId'</span><span class="token punctuation">,</span> json<span class="token punctuation">.</span>accessid<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ossData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'policy'</span><span class="token punctuation">,</span> json<span class="token punctuation">.</span>policy<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ossData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'Signature'</span><span class="token punctuation">,</span> json<span class="token punctuation">.</span>signature<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ossData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> json<span class="token punctuation">.</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 添加文件</span>                    ossData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> rst<span class="token punctuation">.</span>file<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>                    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        url<span class="token punctuation">:</span> json<span class="token punctuation">.</span>host<span class="token punctuation">,</span>                        data<span class="token punctuation">:</span> ossData<span class="token punctuation">,</span>                        processData<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                        contentType<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                        type<span class="token punctuation">:</span> <span class="token string">'POST'</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 成功后显示图片预览</span>                        <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        img<span class="token punctuation">.</span>src <span class="token operator">=</span> rst<span class="token punctuation">.</span>base64<span class="token punctuation">;</span>                        img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".preview_box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> rst<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 万一出错了，这里可以捕捉到错误信息</span>                <span class="token comment" spellcheck="true">// 而且以上的then都不会执行</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'ERROR:'</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">always</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 不管是成功失败，这里都会执行</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="5-遗留问题"><a href="#5-遗留问题" class="headerlink" title="5. 遗留问题"></a>5. 遗留问题</h2><ol>    <li><del>OSS返回给客户端的XML没法正常解析</del></li>    <li><del>返回的XML是报错内容，但是不影响文件的正常上传（文件上传返回的是默认的204）。报错内容是（大意）“[AccessDenied]：The bucket you visit is not belong to you.”，查了下文档说原因是“子用户没有Bucket管理的权限(如getBucketAcl CreateBucket、deleteBucket setBucketReferer、 getBucketReferer等)”，调了半天的 RAM（访问控制）也没弄好，不知道是什么原因~</del></li></ol><h2 id="6-2016-8-31-补遗："><a href="#6-2016-8-31-补遗：" class="headerlink" title="6. 2016/8/31 补遗："></a>6. 2016/8/31 补遗：</h2><p>上次留下几个问题，已经解决了，所以过来填坑。</p><p>其实这两个问题算是一个问题，在 PostObject 文档里，表单域里有个参数“success_action_status”，描述是“未指定success_action_redirect表单域时，该表单域指定了上传成功后返回给客户端的状态码。 接受值为200, 201, 204（默认）。 如果该域的值为200或者204，OSS返回一个空文档和相应的状态码。 如果该域的值设置为201，OSS返回一个XML文件和201状态码。 如果其值未设置或者设置成一个非法值，OSS返回一个空文档和204状态码。”所以，之前返回不正常的这个问题，只要强行指定返回201状态码，就可以正常收到返回的XML了（并且也没有先前报错的问题了）。</p><p>上代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://cdn.bootcss.com/jquery/2.2.4/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>localRZ/lrz.bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#img_input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"change"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> file <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取图片资源</span>        <span class="token keyword">var</span> filename <span class="token operator">=</span> file<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 只选择图片文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'image.*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// LocalResizeIMG写法：</span>        <span class="token function">lrz</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> fieldName<span class="token punctuation">:</span> <span class="token string">'osstest'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>rst<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> ossData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 先请求授权，然后回调</span>                $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">'ossget.php'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>json<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 添加配置参数</span>                    ossData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'OSSAccessKeyId'</span><span class="token punctuation">,</span> json<span class="token punctuation">.</span>accessid<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ossData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'policy'</span><span class="token punctuation">,</span> json<span class="token punctuation">.</span>policy<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ossData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'Signature'</span><span class="token punctuation">,</span> json<span class="token punctuation">.</span>signature<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ossData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> json<span class="token punctuation">.</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ossData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'success_action_status'</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指定返回的状态码</span>                    ossData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> rst<span class="token punctuation">.</span>file<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>                    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        url<span class="token punctuation">:</span> json<span class="token punctuation">.</span>host<span class="token punctuation">,</span>                        data<span class="token punctuation">:</span> ossData<span class="token punctuation">,</span>                        dataType<span class="token punctuation">:</span> <span class="token string">'xml'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 这里加个对返回内容的类型指定</span>                        processData<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                        contentType<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                        type<span class="token punctuation">:</span> <span class="token string">'POST'</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 返回的上传信息</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'PostResponse'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'PostResponse'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Bucket：'</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'Bucket'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                            console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Location：'</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'Location'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                            console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Key：'</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'Key'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                            console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'ETag：'</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'ETag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// 图片预览</span>                        <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        img<span class="token punctuation">.</span>src <span class="token operator">=</span> rst<span class="token punctuation">.</span>base64<span class="token punctuation">;</span>                        img<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".preview_box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> rst<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 万一出错了，这里可以捕捉到错误信息</span>                <span class="token comment" spellcheck="true">// 而且以上的then都不会执行</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'ERROR:'</span><span class="token operator">+</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">always</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 不管是成功失败，这里都会执行</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>最后总结了下，HTTP 一定要学好啊！！（于是哭着滚去看书了……）</p><hr><p>【参考资料】</p><ol>    <li><a href="http://www.jquery123.com/jQuery.ajax/" target="_blank" rel="noopener">jQuery手册 - AJAX函数</a></li>    <li><a href="http://www.zhangxinxu.com/wordpress/2013/10/understand-domstring-document-formdata-blob-file-arraybuffer/" target="_blank" rel="noopener">理解DOMString、Document、FormData、Blob、File、ArrayBuffer数据类型</a></li>    <li><a href="https://help.aliyun.com/document_detail/31926.html" target="_blank" rel="noopener">对象存储OSS - Web端直传实践：采用服务端签名后直传</a></li>    <li><a href="https://help.aliyun.com/document_detail/31988.html" target="_blank" rel="noopener">对象存储OSS - API手册 - Post Object</a></li>    <li><a href="https://help.aliyun.com/knowledge_detail/42976.html" target="_blank" rel="noopener">对象存储OSS - API手册 - PostObject错误及排查</a></li>    <li><a href="https://market.aliyun.com/products/53690006/cmgj000281.html" target="_blank" rel="noopener">对象存储OSS - OSS控制台客户端Windows版</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间参与了一个H5项目，里边有个需求是用户上传图片。当时的方案是前端先调用微信的JSSDK选择图片并上传，然后再从后端下载到服务器上。然而用的时候发现客户端给的图片有大有小，但是由于用了微信的接口，图片在下载之前是没法控制的。后来在想能不能调用HTML5原生的文件上传接口，另外还可以配合阿里云的OSS对图片做进一步处理，所以就有了这篇文章。
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="前端" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="https://marsgt.github.io/tags/PHP/"/>
    
      <category term="JavaScript" scheme="https://marsgt.github.io/tags/JavaScript/"/>
    
      <category term="阿里云" scheme="https://marsgt.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="OSS" scheme="https://marsgt.github.io/tags/OSS/"/>
    
  </entry>
  
  <entry>
    <title>brackets插件推荐</title>
    <link href="https://marsgt.github.io/2016/01/10/brackets%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <id>https://marsgt.github.io/2016/01/10/brackets插件推荐/</id>
    <published>2016-01-10T11:10:37.000Z</published>
    <updated>2018-12-30T01:54:25.279Z</updated>
    
    <content type="html"><![CDATA[<p>一开始用 Brackets 的时候，看了很多推荐插件的文章，里边的插件大抵都差不多，千篇一律，毫无新意。后来偶然碰到了这个网站：<a href="http://brackets.dnbard.com/" target="_blank" rel="noopener">Brackets Extensions</a> （里边是各种插件的排行榜，点开之后还有原版介绍，感兴趣的可以挨个试试）后来，我就疯狂的试用了一堆插件……    <a id="more"></a></p><p>嗯，下边还是书归正传，还是说一说我自己用的顺手的几个插件吧：</p><ol>    <li>Emmet<br>也叫/曾经被称为 ZenCoding ，万年不变的“榜首/必装”插件。不过如果平常没有这个习惯的，也可以试试换用各种 snipper 插件，这些插件的优点就是本身的可定制程度要比 Emmet 高一些（Emmet 反正我自己的程度也就是改改 lang 的设定啊什么的，还得去翻代码。。）</li>    <li>Tabs - Custom Working<br>从前边网站上知道的一个插件。没办法，个人对浏览器上的多标签页简直是爱不释手，所以发现了这个插件以后简直是欲罢不能啊~更何况它标签上的 icon 也是挺好看的。。。</li>    <li>Extensions Rating<br>插件管理器的“美化”插件，会增加一些 GitHub 上的头像啊 stars 数啊 forks 数啊什么的东西，方便选择。看各人喜好装吧。</li>    <li>Brackets File Tree Exclude<br>左边文件列表的排除插件，可以指定一些比如像是 git 啊 node_modules 啊之类的不想让它出现的东东。</li>    <li>Js-Beautify &amp; JS CSS Minifier<br>前者负责美化、后者负责压缩，都是我觉得比较好用的。</li>    <li>JSHint &amp; JSHint Configurator<br>文档检查插件，我觉得比自带的 JSLint 要好用。后边那个是在文档中自定义语法规则的。在这里多说一句，屏蔽自带的 JSLint 是在 brackets.json 里边加上        <pre class=" language-javascript"><code class="language-javascript"><span class="token string">"language"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"javascript"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"linting.prefer"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"JSHint"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"linting.usePreferredOnly"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre> 这一句，然后保存重启 Brackets 就行了。</li>    <li>Autoprefixer<br>PostCSS 的神器，专门用来给 CSS 加各种前缀的。</li></ol><p>反正常用的就是这些了，还有哪些好用的欢迎推荐~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一开始用 Brackets 的时候，看了很多推荐插件的文章，里边的插件大抵都差不多，千篇一律，毫无新意。后来偶然碰到了这个网站：&lt;a href=&quot;http://brackets.dnbard.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Brackets Extensions&lt;/a&gt; （里边是各种插件的排行榜，点开之后还有原版介绍，感兴趣的可以挨个试试）后来，我就疯狂的试用了一堆插件……
    
    </summary>
    
      <category term="经验技巧" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/"/>
    
      <category term="开发工具" scheme="https://marsgt.github.io/categories/%E7%BB%8F%E9%AA%8C%E6%8A%80%E5%B7%A7/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="brackets" scheme="https://marsgt.github.io/tags/brackets/"/>
    
      <category term="编辑器" scheme="https://marsgt.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
      <category term="插件" scheme="https://marsgt.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
</feed>
